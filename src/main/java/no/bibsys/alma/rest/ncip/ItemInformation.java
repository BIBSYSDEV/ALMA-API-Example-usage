//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.03.12 at 09:54:26 AM CET 
//


package no.bibsys.alma.rest.ncip;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.datatype.XMLGregorianCalendar;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{http://www.niso.org/2008/ncip}ItemId" minOccurs="0"/&gt;
 *         &lt;choice&gt;
 *           &lt;sequence&gt;
 *             &lt;element ref="{http://www.niso.org/2008/ncip}RequestId" maxOccurs="unbounded" minOccurs="0"/&gt;
 *             &lt;element ref="{http://www.niso.org/2008/ncip}CurrentBorrower" minOccurs="0"/&gt;
 *             &lt;element ref="{http://www.niso.org/2008/ncip}CurrentRequester" maxOccurs="unbounded" minOccurs="0"/&gt;
 *             &lt;element ref="{http://www.niso.org/2008/ncip}DateDue" minOccurs="0"/&gt;
 *             &lt;element ref="{http://www.niso.org/2008/ncip}DateRecalled" minOccurs="0"/&gt;
 *             &lt;element ref="{http://www.niso.org/2008/ncip}HoldPickupDate" minOccurs="0"/&gt;
 *             &lt;element ref="{http://www.niso.org/2008/ncip}ItemTransaction" minOccurs="0"/&gt;
 *             &lt;element ref="{http://www.niso.org/2008/ncip}ItemOptionalFields" minOccurs="0"/&gt;
 *             &lt;element ref="{http://www.niso.org/2008/ncip}ItemNote" minOccurs="0"/&gt;
 *             &lt;element ref="{http://www.niso.org/2008/ncip}Ext" minOccurs="0"/&gt;
 *           &lt;/sequence&gt;
 *           &lt;element ref="{http://www.niso.org/2008/ncip}Problem" maxOccurs="unbounded"/&gt;
 *         &lt;/choice&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "itemId",
    "problems",
    "requestIds",
    "currentBorrower",
    "currentRequesters",
    "dateDue",
    "dateRecalled",
    "holdPickupDate",
    "itemTransaction",
    "itemOptionalFields",
    "itemNote",
    "ext"
})
@XmlRootElement(name = "ItemInformation")
public class ItemInformation implements Equals2, HashCode2, ToString2
{

    @XmlElement(name = "ItemId")
    protected ItemId itemId;
    @XmlElement(name = "Problem")
    protected List<Problem> problems;
    @XmlElement(name = "RequestId")
    protected List<RequestId> requestIds;
    @XmlElement(name = "CurrentBorrower")
    protected CurrentBorrower currentBorrower;
    @XmlElement(name = "CurrentRequester")
    protected List<CurrentRequester> currentRequesters;
    @XmlElement(name = "DateDue")
    @XmlSchemaType(name = "dateTime")
    protected XMLGregorianCalendar dateDue;
    @XmlElement(name = "DateRecalled")
    @XmlSchemaType(name = "dateTime")
    protected XMLGregorianCalendar dateRecalled;
    @XmlElement(name = "HoldPickupDate")
    @XmlSchemaType(name = "dateTime")
    protected XMLGregorianCalendar holdPickupDate;
    @XmlElement(name = "ItemTransaction")
    protected ItemTransaction itemTransaction;
    @XmlElement(name = "ItemOptionalFields")
    protected ItemOptionalFields itemOptionalFields;
    @XmlElement(name = "ItemNote")
    protected String itemNote;
    @XmlElement(name = "Ext")
    protected Ext ext;

    /**
     * Gets the value of the itemId property.
     * 
     * @return
     *     possible object is
     *     {@link ItemId }
     *     
     */
    public ItemId getItemId() {
        return itemId;
    }

    /**
     * Sets the value of the itemId property.
     * 
     * @param value
     *     allowed object is
     *     {@link ItemId }
     *     
     */
    public void setItemId(ItemId value) {
        this.itemId = value;
    }

    /**
     * Gets the value of the problems property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the problems property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getProblems().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Problem }
     * 
     * 
     */
    public List<Problem> getProblems() {
        if (problems == null) {
            problems = new ArrayList<Problem>();
        }
        return this.problems;
    }

    /**
     * Gets the value of the requestIds property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the requestIds property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRequestIds().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link RequestId }
     * 
     * 
     */
    public List<RequestId> getRequestIds() {
        if (requestIds == null) {
            requestIds = new ArrayList<RequestId>();
        }
        return this.requestIds;
    }

    /**
     * Gets the value of the currentBorrower property.
     * 
     * @return
     *     possible object is
     *     {@link CurrentBorrower }
     *     
     */
    public CurrentBorrower getCurrentBorrower() {
        return currentBorrower;
    }

    /**
     * Sets the value of the currentBorrower property.
     * 
     * @param value
     *     allowed object is
     *     {@link CurrentBorrower }
     *     
     */
    public void setCurrentBorrower(CurrentBorrower value) {
        this.currentBorrower = value;
    }

    /**
     * Gets the value of the currentRequesters property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the currentRequesters property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCurrentRequesters().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CurrentRequester }
     * 
     * 
     */
    public List<CurrentRequester> getCurrentRequesters() {
        if (currentRequesters == null) {
            currentRequesters = new ArrayList<CurrentRequester>();
        }
        return this.currentRequesters;
    }

    /**
     * Gets the value of the dateDue property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getDateDue() {
        return dateDue;
    }

    /**
     * Sets the value of the dateDue property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setDateDue(XMLGregorianCalendar value) {
        this.dateDue = value;
    }

    /**
     * Gets the value of the dateRecalled property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getDateRecalled() {
        return dateRecalled;
    }

    /**
     * Sets the value of the dateRecalled property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setDateRecalled(XMLGregorianCalendar value) {
        this.dateRecalled = value;
    }

    /**
     * Gets the value of the holdPickupDate property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getHoldPickupDate() {
        return holdPickupDate;
    }

    /**
     * Sets the value of the holdPickupDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setHoldPickupDate(XMLGregorianCalendar value) {
        this.holdPickupDate = value;
    }

    /**
     * Gets the value of the itemTransaction property.
     * 
     * @return
     *     possible object is
     *     {@link ItemTransaction }
     *     
     */
    public ItemTransaction getItemTransaction() {
        return itemTransaction;
    }

    /**
     * Sets the value of the itemTransaction property.
     * 
     * @param value
     *     allowed object is
     *     {@link ItemTransaction }
     *     
     */
    public void setItemTransaction(ItemTransaction value) {
        this.itemTransaction = value;
    }

    /**
     * Gets the value of the itemOptionalFields property.
     * 
     * @return
     *     possible object is
     *     {@link ItemOptionalFields }
     *     
     */
    public ItemOptionalFields getItemOptionalFields() {
        return itemOptionalFields;
    }

    /**
     * Sets the value of the itemOptionalFields property.
     * 
     * @param value
     *     allowed object is
     *     {@link ItemOptionalFields }
     *     
     */
    public void setItemOptionalFields(ItemOptionalFields value) {
        this.itemOptionalFields = value;
    }

    /**
     * Gets the value of the itemNote property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getItemNote() {
        return itemNote;
    }

    /**
     * Sets the value of the itemNote property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setItemNote(String value) {
        this.itemNote = value;
    }

    /**
     * Gets the value of the ext property.
     * 
     * @return
     *     possible object is
     *     {@link Ext }
     *     
     */
    public Ext getExt() {
        return ext;
    }

    /**
     * Sets the value of the ext property.
     * 
     * @param value
     *     allowed object is
     *     {@link Ext }
     *     
     */
    public void setExt(Ext value) {
        this.ext = value;
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = 1;
        {
            ItemId theItemId;
            theItemId = this.getItemId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "itemId", theItemId), currentHashCode, theItemId, (this.itemId!= null));
        }
        {
            List<Problem> theProblems;
            theProblems = (((this.problems!= null)&&(!this.problems.isEmpty()))?this.getProblems():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "problems", theProblems), currentHashCode, theProblems, ((this.problems!= null)&&(!this.problems.isEmpty())));
        }
        {
            List<RequestId> theRequestIds;
            theRequestIds = (((this.requestIds!= null)&&(!this.requestIds.isEmpty()))?this.getRequestIds():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "requestIds", theRequestIds), currentHashCode, theRequestIds, ((this.requestIds!= null)&&(!this.requestIds.isEmpty())));
        }
        {
            CurrentBorrower theCurrentBorrower;
            theCurrentBorrower = this.getCurrentBorrower();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currentBorrower", theCurrentBorrower), currentHashCode, theCurrentBorrower, (this.currentBorrower!= null));
        }
        {
            List<CurrentRequester> theCurrentRequesters;
            theCurrentRequesters = (((this.currentRequesters!= null)&&(!this.currentRequesters.isEmpty()))?this.getCurrentRequesters():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currentRequesters", theCurrentRequesters), currentHashCode, theCurrentRequesters, ((this.currentRequesters!= null)&&(!this.currentRequesters.isEmpty())));
        }
        {
            XMLGregorianCalendar theDateDue;
            theDateDue = this.getDateDue();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dateDue", theDateDue), currentHashCode, theDateDue, (this.dateDue!= null));
        }
        {
            XMLGregorianCalendar theDateRecalled;
            theDateRecalled = this.getDateRecalled();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dateRecalled", theDateRecalled), currentHashCode, theDateRecalled, (this.dateRecalled!= null));
        }
        {
            XMLGregorianCalendar theHoldPickupDate;
            theHoldPickupDate = this.getHoldPickupDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "holdPickupDate", theHoldPickupDate), currentHashCode, theHoldPickupDate, (this.holdPickupDate!= null));
        }
        {
            ItemTransaction theItemTransaction;
            theItemTransaction = this.getItemTransaction();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "itemTransaction", theItemTransaction), currentHashCode, theItemTransaction, (this.itemTransaction!= null));
        }
        {
            ItemOptionalFields theItemOptionalFields;
            theItemOptionalFields = this.getItemOptionalFields();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "itemOptionalFields", theItemOptionalFields), currentHashCode, theItemOptionalFields, (this.itemOptionalFields!= null));
        }
        {
            String theItemNote;
            theItemNote = this.getItemNote();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "itemNote", theItemNote), currentHashCode, theItemNote, (this.itemNote!= null));
        }
        {
            Ext theExt;
            theExt = this.getExt();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ext", theExt), currentHashCode, theExt, (this.ext!= null));
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final ItemInformation that = ((ItemInformation) object);
        {
            ItemId lhsItemId;
            lhsItemId = this.getItemId();
            ItemId rhsItemId;
            rhsItemId = that.getItemId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "itemId", lhsItemId), LocatorUtils.property(thatLocator, "itemId", rhsItemId), lhsItemId, rhsItemId, (this.itemId!= null), (that.itemId!= null))) {
                return false;
            }
        }
        {
            List<Problem> lhsProblems;
            lhsProblems = (((this.problems!= null)&&(!this.problems.isEmpty()))?this.getProblems():null);
            List<Problem> rhsProblems;
            rhsProblems = (((that.problems!= null)&&(!that.problems.isEmpty()))?that.getProblems():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "problems", lhsProblems), LocatorUtils.property(thatLocator, "problems", rhsProblems), lhsProblems, rhsProblems, ((this.problems!= null)&&(!this.problems.isEmpty())), ((that.problems!= null)&&(!that.problems.isEmpty())))) {
                return false;
            }
        }
        {
            List<RequestId> lhsRequestIds;
            lhsRequestIds = (((this.requestIds!= null)&&(!this.requestIds.isEmpty()))?this.getRequestIds():null);
            List<RequestId> rhsRequestIds;
            rhsRequestIds = (((that.requestIds!= null)&&(!that.requestIds.isEmpty()))?that.getRequestIds():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "requestIds", lhsRequestIds), LocatorUtils.property(thatLocator, "requestIds", rhsRequestIds), lhsRequestIds, rhsRequestIds, ((this.requestIds!= null)&&(!this.requestIds.isEmpty())), ((that.requestIds!= null)&&(!that.requestIds.isEmpty())))) {
                return false;
            }
        }
        {
            CurrentBorrower lhsCurrentBorrower;
            lhsCurrentBorrower = this.getCurrentBorrower();
            CurrentBorrower rhsCurrentBorrower;
            rhsCurrentBorrower = that.getCurrentBorrower();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "currentBorrower", lhsCurrentBorrower), LocatorUtils.property(thatLocator, "currentBorrower", rhsCurrentBorrower), lhsCurrentBorrower, rhsCurrentBorrower, (this.currentBorrower!= null), (that.currentBorrower!= null))) {
                return false;
            }
        }
        {
            List<CurrentRequester> lhsCurrentRequesters;
            lhsCurrentRequesters = (((this.currentRequesters!= null)&&(!this.currentRequesters.isEmpty()))?this.getCurrentRequesters():null);
            List<CurrentRequester> rhsCurrentRequesters;
            rhsCurrentRequesters = (((that.currentRequesters!= null)&&(!that.currentRequesters.isEmpty()))?that.getCurrentRequesters():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "currentRequesters", lhsCurrentRequesters), LocatorUtils.property(thatLocator, "currentRequesters", rhsCurrentRequesters), lhsCurrentRequesters, rhsCurrentRequesters, ((this.currentRequesters!= null)&&(!this.currentRequesters.isEmpty())), ((that.currentRequesters!= null)&&(!that.currentRequesters.isEmpty())))) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsDateDue;
            lhsDateDue = this.getDateDue();
            XMLGregorianCalendar rhsDateDue;
            rhsDateDue = that.getDateDue();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dateDue", lhsDateDue), LocatorUtils.property(thatLocator, "dateDue", rhsDateDue), lhsDateDue, rhsDateDue, (this.dateDue!= null), (that.dateDue!= null))) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsDateRecalled;
            lhsDateRecalled = this.getDateRecalled();
            XMLGregorianCalendar rhsDateRecalled;
            rhsDateRecalled = that.getDateRecalled();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dateRecalled", lhsDateRecalled), LocatorUtils.property(thatLocator, "dateRecalled", rhsDateRecalled), lhsDateRecalled, rhsDateRecalled, (this.dateRecalled!= null), (that.dateRecalled!= null))) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsHoldPickupDate;
            lhsHoldPickupDate = this.getHoldPickupDate();
            XMLGregorianCalendar rhsHoldPickupDate;
            rhsHoldPickupDate = that.getHoldPickupDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "holdPickupDate", lhsHoldPickupDate), LocatorUtils.property(thatLocator, "holdPickupDate", rhsHoldPickupDate), lhsHoldPickupDate, rhsHoldPickupDate, (this.holdPickupDate!= null), (that.holdPickupDate!= null))) {
                return false;
            }
        }
        {
            ItemTransaction lhsItemTransaction;
            lhsItemTransaction = this.getItemTransaction();
            ItemTransaction rhsItemTransaction;
            rhsItemTransaction = that.getItemTransaction();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "itemTransaction", lhsItemTransaction), LocatorUtils.property(thatLocator, "itemTransaction", rhsItemTransaction), lhsItemTransaction, rhsItemTransaction, (this.itemTransaction!= null), (that.itemTransaction!= null))) {
                return false;
            }
        }
        {
            ItemOptionalFields lhsItemOptionalFields;
            lhsItemOptionalFields = this.getItemOptionalFields();
            ItemOptionalFields rhsItemOptionalFields;
            rhsItemOptionalFields = that.getItemOptionalFields();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "itemOptionalFields", lhsItemOptionalFields), LocatorUtils.property(thatLocator, "itemOptionalFields", rhsItemOptionalFields), lhsItemOptionalFields, rhsItemOptionalFields, (this.itemOptionalFields!= null), (that.itemOptionalFields!= null))) {
                return false;
            }
        }
        {
            String lhsItemNote;
            lhsItemNote = this.getItemNote();
            String rhsItemNote;
            rhsItemNote = that.getItemNote();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "itemNote", lhsItemNote), LocatorUtils.property(thatLocator, "itemNote", rhsItemNote), lhsItemNote, rhsItemNote, (this.itemNote!= null), (that.itemNote!= null))) {
                return false;
            }
        }
        {
            Ext lhsExt;
            lhsExt = this.getExt();
            Ext rhsExt;
            rhsExt = that.getExt();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ext", lhsExt), LocatorUtils.property(thatLocator, "ext", rhsExt), lhsExt, rhsExt, (this.ext!= null), (that.ext!= null))) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            ItemId theItemId;
            theItemId = this.getItemId();
            strategy.appendField(locator, this, "itemId", buffer, theItemId, (this.itemId!= null));
        }
        {
            List<Problem> theProblems;
            theProblems = (((this.problems!= null)&&(!this.problems.isEmpty()))?this.getProblems():null);
            strategy.appendField(locator, this, "problems", buffer, theProblems, ((this.problems!= null)&&(!this.problems.isEmpty())));
        }
        {
            List<RequestId> theRequestIds;
            theRequestIds = (((this.requestIds!= null)&&(!this.requestIds.isEmpty()))?this.getRequestIds():null);
            strategy.appendField(locator, this, "requestIds", buffer, theRequestIds, ((this.requestIds!= null)&&(!this.requestIds.isEmpty())));
        }
        {
            CurrentBorrower theCurrentBorrower;
            theCurrentBorrower = this.getCurrentBorrower();
            strategy.appendField(locator, this, "currentBorrower", buffer, theCurrentBorrower, (this.currentBorrower!= null));
        }
        {
            List<CurrentRequester> theCurrentRequesters;
            theCurrentRequesters = (((this.currentRequesters!= null)&&(!this.currentRequesters.isEmpty()))?this.getCurrentRequesters():null);
            strategy.appendField(locator, this, "currentRequesters", buffer, theCurrentRequesters, ((this.currentRequesters!= null)&&(!this.currentRequesters.isEmpty())));
        }
        {
            XMLGregorianCalendar theDateDue;
            theDateDue = this.getDateDue();
            strategy.appendField(locator, this, "dateDue", buffer, theDateDue, (this.dateDue!= null));
        }
        {
            XMLGregorianCalendar theDateRecalled;
            theDateRecalled = this.getDateRecalled();
            strategy.appendField(locator, this, "dateRecalled", buffer, theDateRecalled, (this.dateRecalled!= null));
        }
        {
            XMLGregorianCalendar theHoldPickupDate;
            theHoldPickupDate = this.getHoldPickupDate();
            strategy.appendField(locator, this, "holdPickupDate", buffer, theHoldPickupDate, (this.holdPickupDate!= null));
        }
        {
            ItemTransaction theItemTransaction;
            theItemTransaction = this.getItemTransaction();
            strategy.appendField(locator, this, "itemTransaction", buffer, theItemTransaction, (this.itemTransaction!= null));
        }
        {
            ItemOptionalFields theItemOptionalFields;
            theItemOptionalFields = this.getItemOptionalFields();
            strategy.appendField(locator, this, "itemOptionalFields", buffer, theItemOptionalFields, (this.itemOptionalFields!= null));
        }
        {
            String theItemNote;
            theItemNote = this.getItemNote();
            strategy.appendField(locator, this, "itemNote", buffer, theItemNote, (this.itemNote!= null));
        }
        {
            Ext theExt;
            theExt = this.getExt();
            strategy.appendField(locator, this, "ext", buffer, theExt, (this.ext!= null));
        }
        return buffer;
    }

}
