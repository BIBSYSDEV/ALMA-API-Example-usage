//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.03.12 at 09:54:26 AM CET 
//


package no.bibsys.alma.rest.ncip;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.datatype.XMLGregorianCalendar;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{http://www.niso.org/2008/ncip}BibliographicDescription" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.niso.org/2008/ncip}ItemUseRestrictionType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.niso.org/2008/ncip}CirculationStatus" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.niso.org/2008/ncip}HoldQueueLength" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.niso.org/2008/ncip}ItemDescription" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.niso.org/2008/ncip}Location" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.niso.org/2008/ncip}PhysicalCondition" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.niso.org/2008/ncip}ElectronicResource" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.niso.org/2008/ncip}SecurityMarker" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.niso.org/2008/ncip}SensitizationFlag" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.niso.org/2008/ncip}DateDue" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.niso.org/2008/ncip}Ext" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "bibliographicDescription",
    "itemUseRestrictionTypes",
    "circulationStatus",
    "holdQueueLength",
    "itemDescription",
    "locations",
    "physicalCondition",
    "electronicResource",
    "securityMarker",
    "sensitizationFlag",
    "dateDue",
    "ext"
})
@XmlRootElement(name = "ItemOptionalFields")
public class ItemOptionalFields implements Equals2, HashCode2, ToString2
{

    @XmlElement(name = "BibliographicDescription")
    protected BibliographicDescription bibliographicDescription;
    @XmlElement(name = "ItemUseRestrictionType")
    protected List<SchemeValuePair> itemUseRestrictionTypes;
    @XmlElement(name = "CirculationStatus")
    protected SchemeValuePair circulationStatus;
    @XmlElement(name = "HoldQueueLength")
    @XmlSchemaType(name = "nonNegativeInteger")
    protected BigInteger holdQueueLength;
    @XmlElement(name = "ItemDescription")
    protected ItemDescription itemDescription;
    @XmlElement(name = "Location")
    protected List<Location> locations;
    @XmlElement(name = "PhysicalCondition")
    protected PhysicalCondition physicalCondition;
    @XmlElement(name = "ElectronicResource")
    protected ElectronicResource electronicResource;
    @XmlElement(name = "SecurityMarker")
    protected SchemeValuePair securityMarker;
    @XmlElement(name = "SensitizationFlag")
    protected SensitizationFlag sensitizationFlag;
    @XmlElement(name = "DateDue")
    @XmlSchemaType(name = "dateTime")
    protected XMLGregorianCalendar dateDue;
    @XmlElement(name = "Ext")
    protected Ext ext;

    /**
     * Gets the value of the bibliographicDescription property.
     * 
     * @return
     *     possible object is
     *     {@link BibliographicDescription }
     *     
     */
    public BibliographicDescription getBibliographicDescription() {
        return bibliographicDescription;
    }

    /**
     * Sets the value of the bibliographicDescription property.
     * 
     * @param value
     *     allowed object is
     *     {@link BibliographicDescription }
     *     
     */
    public void setBibliographicDescription(BibliographicDescription value) {
        this.bibliographicDescription = value;
    }

    /**
     * Gets the value of the itemUseRestrictionTypes property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the itemUseRestrictionTypes property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getItemUseRestrictionTypes().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SchemeValuePair }
     * 
     * 
     */
    public List<SchemeValuePair> getItemUseRestrictionTypes() {
        if (itemUseRestrictionTypes == null) {
            itemUseRestrictionTypes = new ArrayList<SchemeValuePair>();
        }
        return this.itemUseRestrictionTypes;
    }

    /**
     * Gets the value of the circulationStatus property.
     * 
     * @return
     *     possible object is
     *     {@link SchemeValuePair }
     *     
     */
    public SchemeValuePair getCirculationStatus() {
        return circulationStatus;
    }

    /**
     * Sets the value of the circulationStatus property.
     * 
     * @param value
     *     allowed object is
     *     {@link SchemeValuePair }
     *     
     */
    public void setCirculationStatus(SchemeValuePair value) {
        this.circulationStatus = value;
    }

    /**
     * Gets the value of the holdQueueLength property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getHoldQueueLength() {
        return holdQueueLength;
    }

    /**
     * Sets the value of the holdQueueLength property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setHoldQueueLength(BigInteger value) {
        this.holdQueueLength = value;
    }

    /**
     * Gets the value of the itemDescription property.
     * 
     * @return
     *     possible object is
     *     {@link ItemDescription }
     *     
     */
    public ItemDescription getItemDescription() {
        return itemDescription;
    }

    /**
     * Sets the value of the itemDescription property.
     * 
     * @param value
     *     allowed object is
     *     {@link ItemDescription }
     *     
     */
    public void setItemDescription(ItemDescription value) {
        this.itemDescription = value;
    }

    /**
     * Gets the value of the locations property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the locations property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getLocations().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Location }
     * 
     * 
     */
    public List<Location> getLocations() {
        if (locations == null) {
            locations = new ArrayList<Location>();
        }
        return this.locations;
    }

    /**
     * Gets the value of the physicalCondition property.
     * 
     * @return
     *     possible object is
     *     {@link PhysicalCondition }
     *     
     */
    public PhysicalCondition getPhysicalCondition() {
        return physicalCondition;
    }

    /**
     * Sets the value of the physicalCondition property.
     * 
     * @param value
     *     allowed object is
     *     {@link PhysicalCondition }
     *     
     */
    public void setPhysicalCondition(PhysicalCondition value) {
        this.physicalCondition = value;
    }

    /**
     * Gets the value of the electronicResource property.
     * 
     * @return
     *     possible object is
     *     {@link ElectronicResource }
     *     
     */
    public ElectronicResource getElectronicResource() {
        return electronicResource;
    }

    /**
     * Sets the value of the electronicResource property.
     * 
     * @param value
     *     allowed object is
     *     {@link ElectronicResource }
     *     
     */
    public void setElectronicResource(ElectronicResource value) {
        this.electronicResource = value;
    }

    /**
     * Gets the value of the securityMarker property.
     * 
     * @return
     *     possible object is
     *     {@link SchemeValuePair }
     *     
     */
    public SchemeValuePair getSecurityMarker() {
        return securityMarker;
    }

    /**
     * Sets the value of the securityMarker property.
     * 
     * @param value
     *     allowed object is
     *     {@link SchemeValuePair }
     *     
     */
    public void setSecurityMarker(SchemeValuePair value) {
        this.securityMarker = value;
    }

    /**
     * Gets the value of the sensitizationFlag property.
     * 
     * @return
     *     possible object is
     *     {@link SensitizationFlag }
     *     
     */
    public SensitizationFlag getSensitizationFlag() {
        return sensitizationFlag;
    }

    /**
     * Sets the value of the sensitizationFlag property.
     * 
     * @param value
     *     allowed object is
     *     {@link SensitizationFlag }
     *     
     */
    public void setSensitizationFlag(SensitizationFlag value) {
        this.sensitizationFlag = value;
    }

    /**
     * Gets the value of the dateDue property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getDateDue() {
        return dateDue;
    }

    /**
     * Sets the value of the dateDue property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setDateDue(XMLGregorianCalendar value) {
        this.dateDue = value;
    }

    /**
     * Gets the value of the ext property.
     * 
     * @return
     *     possible object is
     *     {@link Ext }
     *     
     */
    public Ext getExt() {
        return ext;
    }

    /**
     * Sets the value of the ext property.
     * 
     * @param value
     *     allowed object is
     *     {@link Ext }
     *     
     */
    public void setExt(Ext value) {
        this.ext = value;
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = 1;
        {
            BibliographicDescription theBibliographicDescription;
            theBibliographicDescription = this.getBibliographicDescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "bibliographicDescription", theBibliographicDescription), currentHashCode, theBibliographicDescription, (this.bibliographicDescription!= null));
        }
        {
            List<SchemeValuePair> theItemUseRestrictionTypes;
            theItemUseRestrictionTypes = (((this.itemUseRestrictionTypes!= null)&&(!this.itemUseRestrictionTypes.isEmpty()))?this.getItemUseRestrictionTypes():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "itemUseRestrictionTypes", theItemUseRestrictionTypes), currentHashCode, theItemUseRestrictionTypes, ((this.itemUseRestrictionTypes!= null)&&(!this.itemUseRestrictionTypes.isEmpty())));
        }
        {
            SchemeValuePair theCirculationStatus;
            theCirculationStatus = this.getCirculationStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "circulationStatus", theCirculationStatus), currentHashCode, theCirculationStatus, (this.circulationStatus!= null));
        }
        {
            BigInteger theHoldQueueLength;
            theHoldQueueLength = this.getHoldQueueLength();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "holdQueueLength", theHoldQueueLength), currentHashCode, theHoldQueueLength, (this.holdQueueLength!= null));
        }
        {
            ItemDescription theItemDescription;
            theItemDescription = this.getItemDescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "itemDescription", theItemDescription), currentHashCode, theItemDescription, (this.itemDescription!= null));
        }
        {
            List<Location> theLocations;
            theLocations = (((this.locations!= null)&&(!this.locations.isEmpty()))?this.getLocations():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "locations", theLocations), currentHashCode, theLocations, ((this.locations!= null)&&(!this.locations.isEmpty())));
        }
        {
            PhysicalCondition thePhysicalCondition;
            thePhysicalCondition = this.getPhysicalCondition();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "physicalCondition", thePhysicalCondition), currentHashCode, thePhysicalCondition, (this.physicalCondition!= null));
        }
        {
            ElectronicResource theElectronicResource;
            theElectronicResource = this.getElectronicResource();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "electronicResource", theElectronicResource), currentHashCode, theElectronicResource, (this.electronicResource!= null));
        }
        {
            SchemeValuePair theSecurityMarker;
            theSecurityMarker = this.getSecurityMarker();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "securityMarker", theSecurityMarker), currentHashCode, theSecurityMarker, (this.securityMarker!= null));
        }
        {
            SensitizationFlag theSensitizationFlag;
            theSensitizationFlag = this.getSensitizationFlag();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sensitizationFlag", theSensitizationFlag), currentHashCode, theSensitizationFlag, (this.sensitizationFlag!= null));
        }
        {
            XMLGregorianCalendar theDateDue;
            theDateDue = this.getDateDue();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dateDue", theDateDue), currentHashCode, theDateDue, (this.dateDue!= null));
        }
        {
            Ext theExt;
            theExt = this.getExt();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ext", theExt), currentHashCode, theExt, (this.ext!= null));
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final ItemOptionalFields that = ((ItemOptionalFields) object);
        {
            BibliographicDescription lhsBibliographicDescription;
            lhsBibliographicDescription = this.getBibliographicDescription();
            BibliographicDescription rhsBibliographicDescription;
            rhsBibliographicDescription = that.getBibliographicDescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "bibliographicDescription", lhsBibliographicDescription), LocatorUtils.property(thatLocator, "bibliographicDescription", rhsBibliographicDescription), lhsBibliographicDescription, rhsBibliographicDescription, (this.bibliographicDescription!= null), (that.bibliographicDescription!= null))) {
                return false;
            }
        }
        {
            List<SchemeValuePair> lhsItemUseRestrictionTypes;
            lhsItemUseRestrictionTypes = (((this.itemUseRestrictionTypes!= null)&&(!this.itemUseRestrictionTypes.isEmpty()))?this.getItemUseRestrictionTypes():null);
            List<SchemeValuePair> rhsItemUseRestrictionTypes;
            rhsItemUseRestrictionTypes = (((that.itemUseRestrictionTypes!= null)&&(!that.itemUseRestrictionTypes.isEmpty()))?that.getItemUseRestrictionTypes():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "itemUseRestrictionTypes", lhsItemUseRestrictionTypes), LocatorUtils.property(thatLocator, "itemUseRestrictionTypes", rhsItemUseRestrictionTypes), lhsItemUseRestrictionTypes, rhsItemUseRestrictionTypes, ((this.itemUseRestrictionTypes!= null)&&(!this.itemUseRestrictionTypes.isEmpty())), ((that.itemUseRestrictionTypes!= null)&&(!that.itemUseRestrictionTypes.isEmpty())))) {
                return false;
            }
        }
        {
            SchemeValuePair lhsCirculationStatus;
            lhsCirculationStatus = this.getCirculationStatus();
            SchemeValuePair rhsCirculationStatus;
            rhsCirculationStatus = that.getCirculationStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "circulationStatus", lhsCirculationStatus), LocatorUtils.property(thatLocator, "circulationStatus", rhsCirculationStatus), lhsCirculationStatus, rhsCirculationStatus, (this.circulationStatus!= null), (that.circulationStatus!= null))) {
                return false;
            }
        }
        {
            BigInteger lhsHoldQueueLength;
            lhsHoldQueueLength = this.getHoldQueueLength();
            BigInteger rhsHoldQueueLength;
            rhsHoldQueueLength = that.getHoldQueueLength();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "holdQueueLength", lhsHoldQueueLength), LocatorUtils.property(thatLocator, "holdQueueLength", rhsHoldQueueLength), lhsHoldQueueLength, rhsHoldQueueLength, (this.holdQueueLength!= null), (that.holdQueueLength!= null))) {
                return false;
            }
        }
        {
            ItemDescription lhsItemDescription;
            lhsItemDescription = this.getItemDescription();
            ItemDescription rhsItemDescription;
            rhsItemDescription = that.getItemDescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "itemDescription", lhsItemDescription), LocatorUtils.property(thatLocator, "itemDescription", rhsItemDescription), lhsItemDescription, rhsItemDescription, (this.itemDescription!= null), (that.itemDescription!= null))) {
                return false;
            }
        }
        {
            List<Location> lhsLocations;
            lhsLocations = (((this.locations!= null)&&(!this.locations.isEmpty()))?this.getLocations():null);
            List<Location> rhsLocations;
            rhsLocations = (((that.locations!= null)&&(!that.locations.isEmpty()))?that.getLocations():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "locations", lhsLocations), LocatorUtils.property(thatLocator, "locations", rhsLocations), lhsLocations, rhsLocations, ((this.locations!= null)&&(!this.locations.isEmpty())), ((that.locations!= null)&&(!that.locations.isEmpty())))) {
                return false;
            }
        }
        {
            PhysicalCondition lhsPhysicalCondition;
            lhsPhysicalCondition = this.getPhysicalCondition();
            PhysicalCondition rhsPhysicalCondition;
            rhsPhysicalCondition = that.getPhysicalCondition();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "physicalCondition", lhsPhysicalCondition), LocatorUtils.property(thatLocator, "physicalCondition", rhsPhysicalCondition), lhsPhysicalCondition, rhsPhysicalCondition, (this.physicalCondition!= null), (that.physicalCondition!= null))) {
                return false;
            }
        }
        {
            ElectronicResource lhsElectronicResource;
            lhsElectronicResource = this.getElectronicResource();
            ElectronicResource rhsElectronicResource;
            rhsElectronicResource = that.getElectronicResource();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "electronicResource", lhsElectronicResource), LocatorUtils.property(thatLocator, "electronicResource", rhsElectronicResource), lhsElectronicResource, rhsElectronicResource, (this.electronicResource!= null), (that.electronicResource!= null))) {
                return false;
            }
        }
        {
            SchemeValuePair lhsSecurityMarker;
            lhsSecurityMarker = this.getSecurityMarker();
            SchemeValuePair rhsSecurityMarker;
            rhsSecurityMarker = that.getSecurityMarker();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "securityMarker", lhsSecurityMarker), LocatorUtils.property(thatLocator, "securityMarker", rhsSecurityMarker), lhsSecurityMarker, rhsSecurityMarker, (this.securityMarker!= null), (that.securityMarker!= null))) {
                return false;
            }
        }
        {
            SensitizationFlag lhsSensitizationFlag;
            lhsSensitizationFlag = this.getSensitizationFlag();
            SensitizationFlag rhsSensitizationFlag;
            rhsSensitizationFlag = that.getSensitizationFlag();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sensitizationFlag", lhsSensitizationFlag), LocatorUtils.property(thatLocator, "sensitizationFlag", rhsSensitizationFlag), lhsSensitizationFlag, rhsSensitizationFlag, (this.sensitizationFlag!= null), (that.sensitizationFlag!= null))) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsDateDue;
            lhsDateDue = this.getDateDue();
            XMLGregorianCalendar rhsDateDue;
            rhsDateDue = that.getDateDue();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dateDue", lhsDateDue), LocatorUtils.property(thatLocator, "dateDue", rhsDateDue), lhsDateDue, rhsDateDue, (this.dateDue!= null), (that.dateDue!= null))) {
                return false;
            }
        }
        {
            Ext lhsExt;
            lhsExt = this.getExt();
            Ext rhsExt;
            rhsExt = that.getExt();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ext", lhsExt), LocatorUtils.property(thatLocator, "ext", rhsExt), lhsExt, rhsExt, (this.ext!= null), (that.ext!= null))) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            BibliographicDescription theBibliographicDescription;
            theBibliographicDescription = this.getBibliographicDescription();
            strategy.appendField(locator, this, "bibliographicDescription", buffer, theBibliographicDescription, (this.bibliographicDescription!= null));
        }
        {
            List<SchemeValuePair> theItemUseRestrictionTypes;
            theItemUseRestrictionTypes = (((this.itemUseRestrictionTypes!= null)&&(!this.itemUseRestrictionTypes.isEmpty()))?this.getItemUseRestrictionTypes():null);
            strategy.appendField(locator, this, "itemUseRestrictionTypes", buffer, theItemUseRestrictionTypes, ((this.itemUseRestrictionTypes!= null)&&(!this.itemUseRestrictionTypes.isEmpty())));
        }
        {
            SchemeValuePair theCirculationStatus;
            theCirculationStatus = this.getCirculationStatus();
            strategy.appendField(locator, this, "circulationStatus", buffer, theCirculationStatus, (this.circulationStatus!= null));
        }
        {
            BigInteger theHoldQueueLength;
            theHoldQueueLength = this.getHoldQueueLength();
            strategy.appendField(locator, this, "holdQueueLength", buffer, theHoldQueueLength, (this.holdQueueLength!= null));
        }
        {
            ItemDescription theItemDescription;
            theItemDescription = this.getItemDescription();
            strategy.appendField(locator, this, "itemDescription", buffer, theItemDescription, (this.itemDescription!= null));
        }
        {
            List<Location> theLocations;
            theLocations = (((this.locations!= null)&&(!this.locations.isEmpty()))?this.getLocations():null);
            strategy.appendField(locator, this, "locations", buffer, theLocations, ((this.locations!= null)&&(!this.locations.isEmpty())));
        }
        {
            PhysicalCondition thePhysicalCondition;
            thePhysicalCondition = this.getPhysicalCondition();
            strategy.appendField(locator, this, "physicalCondition", buffer, thePhysicalCondition, (this.physicalCondition!= null));
        }
        {
            ElectronicResource theElectronicResource;
            theElectronicResource = this.getElectronicResource();
            strategy.appendField(locator, this, "electronicResource", buffer, theElectronicResource, (this.electronicResource!= null));
        }
        {
            SchemeValuePair theSecurityMarker;
            theSecurityMarker = this.getSecurityMarker();
            strategy.appendField(locator, this, "securityMarker", buffer, theSecurityMarker, (this.securityMarker!= null));
        }
        {
            SensitizationFlag theSensitizationFlag;
            theSensitizationFlag = this.getSensitizationFlag();
            strategy.appendField(locator, this, "sensitizationFlag", buffer, theSensitizationFlag, (this.sensitizationFlag!= null));
        }
        {
            XMLGregorianCalendar theDateDue;
            theDateDue = this.getDateDue();
            strategy.appendField(locator, this, "dateDue", buffer, theDateDue, (this.dateDue!= null));
        }
        {
            Ext theExt;
            theExt = this.getExt();
            strategy.appendField(locator, this, "ext", buffer, theExt, (this.ext!= null));
        }
        return buffer;
    }

}
