//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.03.12 at 09:54:26 AM CET 
//


package no.bibsys.alma.rest.ncip;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{http://www.niso.org/2008/ncip}ResponseHeader" minOccurs="0"/&gt;
 *         &lt;choice&gt;
 *           &lt;element ref="{http://www.niso.org/2008/ncip}Problem" maxOccurs="unbounded"/&gt;
 *           &lt;sequence&gt;
 *             &lt;element ref="{http://www.niso.org/2008/ncip}UserId"/&gt;
 *             &lt;element ref="{http://www.niso.org/2008/ncip}UserFiscalAccount" maxOccurs="unbounded" minOccurs="0"/&gt;
 *             &lt;element ref="{http://www.niso.org/2008/ncip}LoanedItemsCount" maxOccurs="unbounded" minOccurs="0"/&gt;
 *             &lt;element ref="{http://www.niso.org/2008/ncip}LoanedItem" maxOccurs="unbounded" minOccurs="0"/&gt;
 *             &lt;element ref="{http://www.niso.org/2008/ncip}RequestedItemsCount" maxOccurs="unbounded" minOccurs="0"/&gt;
 *             &lt;element ref="{http://www.niso.org/2008/ncip}RequestedItem" maxOccurs="unbounded" minOccurs="0"/&gt;
 *             &lt;element ref="{http://www.niso.org/2008/ncip}UserOptionalFields" minOccurs="0"/&gt;
 *           &lt;/sequence&gt;
 *         &lt;/choice&gt;
 *         &lt;element ref="{http://www.niso.org/2008/ncip}Ext" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "responseHeader",
    "userId",
    "userFiscalAccounts",
    "loanedItemsCounts",
    "loanedItems",
    "requestedItemsCounts",
    "requestedItems",
    "userOptionalFields",
    "problems",
    "ext"
})
@XmlRootElement(name = "LookupUserResponse")
public class LookupUserResponse implements Equals2, HashCode2, ToString2
{

    @XmlElement(name = "ResponseHeader")
    protected ResponseHeader responseHeader;
    @XmlElement(name = "UserId")
    protected UserId userId;
    @XmlElement(name = "UserFiscalAccount")
    protected List<UserFiscalAccount> userFiscalAccounts;
    @XmlElement(name = "LoanedItemsCount")
    protected List<LoanedItemsCount> loanedItemsCounts;
    @XmlElement(name = "LoanedItem")
    protected List<LoanedItem> loanedItems;
    @XmlElement(name = "RequestedItemsCount")
    protected List<RequestedItemsCount> requestedItemsCounts;
    @XmlElement(name = "RequestedItem")
    protected List<RequestedItem> requestedItems;
    @XmlElement(name = "UserOptionalFields")
    protected UserOptionalFields userOptionalFields;
    @XmlElement(name = "Problem")
    protected List<Problem> problems;
    @XmlElement(name = "Ext")
    protected Ext ext;

    /**
     * Gets the value of the responseHeader property.
     * 
     * @return
     *     possible object is
     *     {@link ResponseHeader }
     *     
     */
    public ResponseHeader getResponseHeader() {
        return responseHeader;
    }

    /**
     * Sets the value of the responseHeader property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResponseHeader }
     *     
     */
    public void setResponseHeader(ResponseHeader value) {
        this.responseHeader = value;
    }

    /**
     * Gets the value of the userId property.
     * 
     * @return
     *     possible object is
     *     {@link UserId }
     *     
     */
    public UserId getUserId() {
        return userId;
    }

    /**
     * Sets the value of the userId property.
     * 
     * @param value
     *     allowed object is
     *     {@link UserId }
     *     
     */
    public void setUserId(UserId value) {
        this.userId = value;
    }

    /**
     * Gets the value of the userFiscalAccounts property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the userFiscalAccounts property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getUserFiscalAccounts().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link UserFiscalAccount }
     * 
     * 
     */
    public List<UserFiscalAccount> getUserFiscalAccounts() {
        if (userFiscalAccounts == null) {
            userFiscalAccounts = new ArrayList<UserFiscalAccount>();
        }
        return this.userFiscalAccounts;
    }

    /**
     * Gets the value of the loanedItemsCounts property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the loanedItemsCounts property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getLoanedItemsCounts().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link LoanedItemsCount }
     * 
     * 
     */
    public List<LoanedItemsCount> getLoanedItemsCounts() {
        if (loanedItemsCounts == null) {
            loanedItemsCounts = new ArrayList<LoanedItemsCount>();
        }
        return this.loanedItemsCounts;
    }

    /**
     * Gets the value of the loanedItems property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the loanedItems property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getLoanedItems().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link LoanedItem }
     * 
     * 
     */
    public List<LoanedItem> getLoanedItems() {
        if (loanedItems == null) {
            loanedItems = new ArrayList<LoanedItem>();
        }
        return this.loanedItems;
    }

    /**
     * Gets the value of the requestedItemsCounts property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the requestedItemsCounts property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRequestedItemsCounts().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link RequestedItemsCount }
     * 
     * 
     */
    public List<RequestedItemsCount> getRequestedItemsCounts() {
        if (requestedItemsCounts == null) {
            requestedItemsCounts = new ArrayList<RequestedItemsCount>();
        }
        return this.requestedItemsCounts;
    }

    /**
     * Gets the value of the requestedItems property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the requestedItems property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRequestedItems().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link RequestedItem }
     * 
     * 
     */
    public List<RequestedItem> getRequestedItems() {
        if (requestedItems == null) {
            requestedItems = new ArrayList<RequestedItem>();
        }
        return this.requestedItems;
    }

    /**
     * Gets the value of the userOptionalFields property.
     * 
     * @return
     *     possible object is
     *     {@link UserOptionalFields }
     *     
     */
    public UserOptionalFields getUserOptionalFields() {
        return userOptionalFields;
    }

    /**
     * Sets the value of the userOptionalFields property.
     * 
     * @param value
     *     allowed object is
     *     {@link UserOptionalFields }
     *     
     */
    public void setUserOptionalFields(UserOptionalFields value) {
        this.userOptionalFields = value;
    }

    /**
     * Gets the value of the problems property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the problems property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getProblems().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Problem }
     * 
     * 
     */
    public List<Problem> getProblems() {
        if (problems == null) {
            problems = new ArrayList<Problem>();
        }
        return this.problems;
    }

    /**
     * Gets the value of the ext property.
     * 
     * @return
     *     possible object is
     *     {@link Ext }
     *     
     */
    public Ext getExt() {
        return ext;
    }

    /**
     * Sets the value of the ext property.
     * 
     * @param value
     *     allowed object is
     *     {@link Ext }
     *     
     */
    public void setExt(Ext value) {
        this.ext = value;
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = 1;
        {
            ResponseHeader theResponseHeader;
            theResponseHeader = this.getResponseHeader();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "responseHeader", theResponseHeader), currentHashCode, theResponseHeader, (this.responseHeader!= null));
        }
        {
            UserId theUserId;
            theUserId = this.getUserId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "userId", theUserId), currentHashCode, theUserId, (this.userId!= null));
        }
        {
            List<UserFiscalAccount> theUserFiscalAccounts;
            theUserFiscalAccounts = (((this.userFiscalAccounts!= null)&&(!this.userFiscalAccounts.isEmpty()))?this.getUserFiscalAccounts():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "userFiscalAccounts", theUserFiscalAccounts), currentHashCode, theUserFiscalAccounts, ((this.userFiscalAccounts!= null)&&(!this.userFiscalAccounts.isEmpty())));
        }
        {
            List<LoanedItemsCount> theLoanedItemsCounts;
            theLoanedItemsCounts = (((this.loanedItemsCounts!= null)&&(!this.loanedItemsCounts.isEmpty()))?this.getLoanedItemsCounts():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "loanedItemsCounts", theLoanedItemsCounts), currentHashCode, theLoanedItemsCounts, ((this.loanedItemsCounts!= null)&&(!this.loanedItemsCounts.isEmpty())));
        }
        {
            List<LoanedItem> theLoanedItems;
            theLoanedItems = (((this.loanedItems!= null)&&(!this.loanedItems.isEmpty()))?this.getLoanedItems():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "loanedItems", theLoanedItems), currentHashCode, theLoanedItems, ((this.loanedItems!= null)&&(!this.loanedItems.isEmpty())));
        }
        {
            List<RequestedItemsCount> theRequestedItemsCounts;
            theRequestedItemsCounts = (((this.requestedItemsCounts!= null)&&(!this.requestedItemsCounts.isEmpty()))?this.getRequestedItemsCounts():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "requestedItemsCounts", theRequestedItemsCounts), currentHashCode, theRequestedItemsCounts, ((this.requestedItemsCounts!= null)&&(!this.requestedItemsCounts.isEmpty())));
        }
        {
            List<RequestedItem> theRequestedItems;
            theRequestedItems = (((this.requestedItems!= null)&&(!this.requestedItems.isEmpty()))?this.getRequestedItems():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "requestedItems", theRequestedItems), currentHashCode, theRequestedItems, ((this.requestedItems!= null)&&(!this.requestedItems.isEmpty())));
        }
        {
            UserOptionalFields theUserOptionalFields;
            theUserOptionalFields = this.getUserOptionalFields();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "userOptionalFields", theUserOptionalFields), currentHashCode, theUserOptionalFields, (this.userOptionalFields!= null));
        }
        {
            List<Problem> theProblems;
            theProblems = (((this.problems!= null)&&(!this.problems.isEmpty()))?this.getProblems():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "problems", theProblems), currentHashCode, theProblems, ((this.problems!= null)&&(!this.problems.isEmpty())));
        }
        {
            Ext theExt;
            theExt = this.getExt();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ext", theExt), currentHashCode, theExt, (this.ext!= null));
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final LookupUserResponse that = ((LookupUserResponse) object);
        {
            ResponseHeader lhsResponseHeader;
            lhsResponseHeader = this.getResponseHeader();
            ResponseHeader rhsResponseHeader;
            rhsResponseHeader = that.getResponseHeader();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "responseHeader", lhsResponseHeader), LocatorUtils.property(thatLocator, "responseHeader", rhsResponseHeader), lhsResponseHeader, rhsResponseHeader, (this.responseHeader!= null), (that.responseHeader!= null))) {
                return false;
            }
        }
        {
            UserId lhsUserId;
            lhsUserId = this.getUserId();
            UserId rhsUserId;
            rhsUserId = that.getUserId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "userId", lhsUserId), LocatorUtils.property(thatLocator, "userId", rhsUserId), lhsUserId, rhsUserId, (this.userId!= null), (that.userId!= null))) {
                return false;
            }
        }
        {
            List<UserFiscalAccount> lhsUserFiscalAccounts;
            lhsUserFiscalAccounts = (((this.userFiscalAccounts!= null)&&(!this.userFiscalAccounts.isEmpty()))?this.getUserFiscalAccounts():null);
            List<UserFiscalAccount> rhsUserFiscalAccounts;
            rhsUserFiscalAccounts = (((that.userFiscalAccounts!= null)&&(!that.userFiscalAccounts.isEmpty()))?that.getUserFiscalAccounts():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "userFiscalAccounts", lhsUserFiscalAccounts), LocatorUtils.property(thatLocator, "userFiscalAccounts", rhsUserFiscalAccounts), lhsUserFiscalAccounts, rhsUserFiscalAccounts, ((this.userFiscalAccounts!= null)&&(!this.userFiscalAccounts.isEmpty())), ((that.userFiscalAccounts!= null)&&(!that.userFiscalAccounts.isEmpty())))) {
                return false;
            }
        }
        {
            List<LoanedItemsCount> lhsLoanedItemsCounts;
            lhsLoanedItemsCounts = (((this.loanedItemsCounts!= null)&&(!this.loanedItemsCounts.isEmpty()))?this.getLoanedItemsCounts():null);
            List<LoanedItemsCount> rhsLoanedItemsCounts;
            rhsLoanedItemsCounts = (((that.loanedItemsCounts!= null)&&(!that.loanedItemsCounts.isEmpty()))?that.getLoanedItemsCounts():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "loanedItemsCounts", lhsLoanedItemsCounts), LocatorUtils.property(thatLocator, "loanedItemsCounts", rhsLoanedItemsCounts), lhsLoanedItemsCounts, rhsLoanedItemsCounts, ((this.loanedItemsCounts!= null)&&(!this.loanedItemsCounts.isEmpty())), ((that.loanedItemsCounts!= null)&&(!that.loanedItemsCounts.isEmpty())))) {
                return false;
            }
        }
        {
            List<LoanedItem> lhsLoanedItems;
            lhsLoanedItems = (((this.loanedItems!= null)&&(!this.loanedItems.isEmpty()))?this.getLoanedItems():null);
            List<LoanedItem> rhsLoanedItems;
            rhsLoanedItems = (((that.loanedItems!= null)&&(!that.loanedItems.isEmpty()))?that.getLoanedItems():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "loanedItems", lhsLoanedItems), LocatorUtils.property(thatLocator, "loanedItems", rhsLoanedItems), lhsLoanedItems, rhsLoanedItems, ((this.loanedItems!= null)&&(!this.loanedItems.isEmpty())), ((that.loanedItems!= null)&&(!that.loanedItems.isEmpty())))) {
                return false;
            }
        }
        {
            List<RequestedItemsCount> lhsRequestedItemsCounts;
            lhsRequestedItemsCounts = (((this.requestedItemsCounts!= null)&&(!this.requestedItemsCounts.isEmpty()))?this.getRequestedItemsCounts():null);
            List<RequestedItemsCount> rhsRequestedItemsCounts;
            rhsRequestedItemsCounts = (((that.requestedItemsCounts!= null)&&(!that.requestedItemsCounts.isEmpty()))?that.getRequestedItemsCounts():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "requestedItemsCounts", lhsRequestedItemsCounts), LocatorUtils.property(thatLocator, "requestedItemsCounts", rhsRequestedItemsCounts), lhsRequestedItemsCounts, rhsRequestedItemsCounts, ((this.requestedItemsCounts!= null)&&(!this.requestedItemsCounts.isEmpty())), ((that.requestedItemsCounts!= null)&&(!that.requestedItemsCounts.isEmpty())))) {
                return false;
            }
        }
        {
            List<RequestedItem> lhsRequestedItems;
            lhsRequestedItems = (((this.requestedItems!= null)&&(!this.requestedItems.isEmpty()))?this.getRequestedItems():null);
            List<RequestedItem> rhsRequestedItems;
            rhsRequestedItems = (((that.requestedItems!= null)&&(!that.requestedItems.isEmpty()))?that.getRequestedItems():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "requestedItems", lhsRequestedItems), LocatorUtils.property(thatLocator, "requestedItems", rhsRequestedItems), lhsRequestedItems, rhsRequestedItems, ((this.requestedItems!= null)&&(!this.requestedItems.isEmpty())), ((that.requestedItems!= null)&&(!that.requestedItems.isEmpty())))) {
                return false;
            }
        }
        {
            UserOptionalFields lhsUserOptionalFields;
            lhsUserOptionalFields = this.getUserOptionalFields();
            UserOptionalFields rhsUserOptionalFields;
            rhsUserOptionalFields = that.getUserOptionalFields();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "userOptionalFields", lhsUserOptionalFields), LocatorUtils.property(thatLocator, "userOptionalFields", rhsUserOptionalFields), lhsUserOptionalFields, rhsUserOptionalFields, (this.userOptionalFields!= null), (that.userOptionalFields!= null))) {
                return false;
            }
        }
        {
            List<Problem> lhsProblems;
            lhsProblems = (((this.problems!= null)&&(!this.problems.isEmpty()))?this.getProblems():null);
            List<Problem> rhsProblems;
            rhsProblems = (((that.problems!= null)&&(!that.problems.isEmpty()))?that.getProblems():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "problems", lhsProblems), LocatorUtils.property(thatLocator, "problems", rhsProblems), lhsProblems, rhsProblems, ((this.problems!= null)&&(!this.problems.isEmpty())), ((that.problems!= null)&&(!that.problems.isEmpty())))) {
                return false;
            }
        }
        {
            Ext lhsExt;
            lhsExt = this.getExt();
            Ext rhsExt;
            rhsExt = that.getExt();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ext", lhsExt), LocatorUtils.property(thatLocator, "ext", rhsExt), lhsExt, rhsExt, (this.ext!= null), (that.ext!= null))) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            ResponseHeader theResponseHeader;
            theResponseHeader = this.getResponseHeader();
            strategy.appendField(locator, this, "responseHeader", buffer, theResponseHeader, (this.responseHeader!= null));
        }
        {
            UserId theUserId;
            theUserId = this.getUserId();
            strategy.appendField(locator, this, "userId", buffer, theUserId, (this.userId!= null));
        }
        {
            List<UserFiscalAccount> theUserFiscalAccounts;
            theUserFiscalAccounts = (((this.userFiscalAccounts!= null)&&(!this.userFiscalAccounts.isEmpty()))?this.getUserFiscalAccounts():null);
            strategy.appendField(locator, this, "userFiscalAccounts", buffer, theUserFiscalAccounts, ((this.userFiscalAccounts!= null)&&(!this.userFiscalAccounts.isEmpty())));
        }
        {
            List<LoanedItemsCount> theLoanedItemsCounts;
            theLoanedItemsCounts = (((this.loanedItemsCounts!= null)&&(!this.loanedItemsCounts.isEmpty()))?this.getLoanedItemsCounts():null);
            strategy.appendField(locator, this, "loanedItemsCounts", buffer, theLoanedItemsCounts, ((this.loanedItemsCounts!= null)&&(!this.loanedItemsCounts.isEmpty())));
        }
        {
            List<LoanedItem> theLoanedItems;
            theLoanedItems = (((this.loanedItems!= null)&&(!this.loanedItems.isEmpty()))?this.getLoanedItems():null);
            strategy.appendField(locator, this, "loanedItems", buffer, theLoanedItems, ((this.loanedItems!= null)&&(!this.loanedItems.isEmpty())));
        }
        {
            List<RequestedItemsCount> theRequestedItemsCounts;
            theRequestedItemsCounts = (((this.requestedItemsCounts!= null)&&(!this.requestedItemsCounts.isEmpty()))?this.getRequestedItemsCounts():null);
            strategy.appendField(locator, this, "requestedItemsCounts", buffer, theRequestedItemsCounts, ((this.requestedItemsCounts!= null)&&(!this.requestedItemsCounts.isEmpty())));
        }
        {
            List<RequestedItem> theRequestedItems;
            theRequestedItems = (((this.requestedItems!= null)&&(!this.requestedItems.isEmpty()))?this.getRequestedItems():null);
            strategy.appendField(locator, this, "requestedItems", buffer, theRequestedItems, ((this.requestedItems!= null)&&(!this.requestedItems.isEmpty())));
        }
        {
            UserOptionalFields theUserOptionalFields;
            theUserOptionalFields = this.getUserOptionalFields();
            strategy.appendField(locator, this, "userOptionalFields", buffer, theUserOptionalFields, (this.userOptionalFields!= null));
        }
        {
            List<Problem> theProblems;
            theProblems = (((this.problems!= null)&&(!this.problems.isEmpty()))?this.getProblems():null);
            strategy.appendField(locator, this, "problems", buffer, theProblems, ((this.problems!= null)&&(!this.problems.isEmpty())));
        }
        {
            Ext theExt;
            theExt = this.getExt();
            strategy.appendField(locator, this, "ext", buffer, theExt, (this.ext!= null));
        }
        return buffer;
    }

}
