//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.03.12 at 09:54:26 AM CET 
//


package no.bibsys.alma.rest.ncip;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{http://www.niso.org/2008/ncip}InitiationHeader" minOccurs="0"/&gt;
 *         &lt;choice&gt;
 *           &lt;element ref="{http://www.niso.org/2008/ncip}BibliographicId" maxOccurs="unbounded"/&gt;
 *           &lt;element ref="{http://www.niso.org/2008/ncip}HoldingsSetId" maxOccurs="unbounded"/&gt;
 *           &lt;element ref="{http://www.niso.org/2008/ncip}ItemId" maxOccurs="unbounded"/&gt;
 *         &lt;/choice&gt;
 *         &lt;element ref="{http://www.niso.org/2008/ncip}ItemElementType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.niso.org/2008/ncip}CurrentBorrowerDesired" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.niso.org/2008/ncip}CurrentRequestersDesired" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.niso.org/2008/ncip}MaximumItemsCount" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.niso.org/2008/ncip}NextItemToken" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.niso.org/2008/ncip}Ext" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "initiationHeader",
    "itemIds",
    "holdingsSetIds",
    "bibliographicIds",
    "itemElementTypes",
    "currentBorrowerDesired",
    "currentRequestersDesired",
    "maximumItemsCount",
    "nextItemToken",
    "ext"
})
@XmlRootElement(name = "LookupItemSet")
public class LookupItemSet implements Equals2, HashCode2, ToString2
{

    @XmlElement(name = "InitiationHeader")
    protected InitiationHeader initiationHeader;
    @XmlElement(name = "ItemId")
    protected List<ItemId> itemIds;
    @XmlElement(name = "HoldingsSetId")
    protected List<String> holdingsSetIds;
    @XmlElement(name = "BibliographicId")
    protected List<BibliographicId> bibliographicIds;
    @XmlElement(name = "ItemElementType")
    protected List<SchemeValuePair> itemElementTypes;
    @XmlElement(name = "CurrentBorrowerDesired")
    protected CurrentBorrowerDesired currentBorrowerDesired;
    @XmlElement(name = "CurrentRequestersDesired")
    protected CurrentRequestersDesired currentRequestersDesired;
    @XmlElement(name = "MaximumItemsCount")
    @XmlSchemaType(name = "positiveInteger")
    protected BigInteger maximumItemsCount;
    @XmlElement(name = "NextItemToken")
    protected String nextItemToken;
    @XmlElement(name = "Ext")
    protected Ext ext;

    /**
     * Gets the value of the initiationHeader property.
     * 
     * @return
     *     possible object is
     *     {@link InitiationHeader }
     *     
     */
    public InitiationHeader getInitiationHeader() {
        return initiationHeader;
    }

    /**
     * Sets the value of the initiationHeader property.
     * 
     * @param value
     *     allowed object is
     *     {@link InitiationHeader }
     *     
     */
    public void setInitiationHeader(InitiationHeader value) {
        this.initiationHeader = value;
    }

    /**
     * Gets the value of the itemIds property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the itemIds property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getItemIds().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ItemId }
     * 
     * 
     */
    public List<ItemId> getItemIds() {
        if (itemIds == null) {
            itemIds = new ArrayList<ItemId>();
        }
        return this.itemIds;
    }

    /**
     * Gets the value of the holdingsSetIds property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the holdingsSetIds property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getHoldingsSetIds().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    public List<String> getHoldingsSetIds() {
        if (holdingsSetIds == null) {
            holdingsSetIds = new ArrayList<String>();
        }
        return this.holdingsSetIds;
    }

    /**
     * Gets the value of the bibliographicIds property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the bibliographicIds property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getBibliographicIds().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link BibliographicId }
     * 
     * 
     */
    public List<BibliographicId> getBibliographicIds() {
        if (bibliographicIds == null) {
            bibliographicIds = new ArrayList<BibliographicId>();
        }
        return this.bibliographicIds;
    }

    /**
     * Gets the value of the itemElementTypes property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the itemElementTypes property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getItemElementTypes().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SchemeValuePair }
     * 
     * 
     */
    public List<SchemeValuePair> getItemElementTypes() {
        if (itemElementTypes == null) {
            itemElementTypes = new ArrayList<SchemeValuePair>();
        }
        return this.itemElementTypes;
    }

    /**
     * Gets the value of the currentBorrowerDesired property.
     * 
     * @return
     *     possible object is
     *     {@link CurrentBorrowerDesired }
     *     
     */
    public CurrentBorrowerDesired getCurrentBorrowerDesired() {
        return currentBorrowerDesired;
    }

    /**
     * Sets the value of the currentBorrowerDesired property.
     * 
     * @param value
     *     allowed object is
     *     {@link CurrentBorrowerDesired }
     *     
     */
    public void setCurrentBorrowerDesired(CurrentBorrowerDesired value) {
        this.currentBorrowerDesired = value;
    }

    /**
     * Gets the value of the currentRequestersDesired property.
     * 
     * @return
     *     possible object is
     *     {@link CurrentRequestersDesired }
     *     
     */
    public CurrentRequestersDesired getCurrentRequestersDesired() {
        return currentRequestersDesired;
    }

    /**
     * Sets the value of the currentRequestersDesired property.
     * 
     * @param value
     *     allowed object is
     *     {@link CurrentRequestersDesired }
     *     
     */
    public void setCurrentRequestersDesired(CurrentRequestersDesired value) {
        this.currentRequestersDesired = value;
    }

    /**
     * Gets the value of the maximumItemsCount property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getMaximumItemsCount() {
        return maximumItemsCount;
    }

    /**
     * Sets the value of the maximumItemsCount property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setMaximumItemsCount(BigInteger value) {
        this.maximumItemsCount = value;
    }

    /**
     * Gets the value of the nextItemToken property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getNextItemToken() {
        return nextItemToken;
    }

    /**
     * Sets the value of the nextItemToken property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setNextItemToken(String value) {
        this.nextItemToken = value;
    }

    /**
     * Gets the value of the ext property.
     * 
     * @return
     *     possible object is
     *     {@link Ext }
     *     
     */
    public Ext getExt() {
        return ext;
    }

    /**
     * Sets the value of the ext property.
     * 
     * @param value
     *     allowed object is
     *     {@link Ext }
     *     
     */
    public void setExt(Ext value) {
        this.ext = value;
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = 1;
        {
            InitiationHeader theInitiationHeader;
            theInitiationHeader = this.getInitiationHeader();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "initiationHeader", theInitiationHeader), currentHashCode, theInitiationHeader, (this.initiationHeader!= null));
        }
        {
            List<ItemId> theItemIds;
            theItemIds = (((this.itemIds!= null)&&(!this.itemIds.isEmpty()))?this.getItemIds():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "itemIds", theItemIds), currentHashCode, theItemIds, ((this.itemIds!= null)&&(!this.itemIds.isEmpty())));
        }
        {
            List<String> theHoldingsSetIds;
            theHoldingsSetIds = (((this.holdingsSetIds!= null)&&(!this.holdingsSetIds.isEmpty()))?this.getHoldingsSetIds():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "holdingsSetIds", theHoldingsSetIds), currentHashCode, theHoldingsSetIds, ((this.holdingsSetIds!= null)&&(!this.holdingsSetIds.isEmpty())));
        }
        {
            List<BibliographicId> theBibliographicIds;
            theBibliographicIds = (((this.bibliographicIds!= null)&&(!this.bibliographicIds.isEmpty()))?this.getBibliographicIds():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "bibliographicIds", theBibliographicIds), currentHashCode, theBibliographicIds, ((this.bibliographicIds!= null)&&(!this.bibliographicIds.isEmpty())));
        }
        {
            List<SchemeValuePair> theItemElementTypes;
            theItemElementTypes = (((this.itemElementTypes!= null)&&(!this.itemElementTypes.isEmpty()))?this.getItemElementTypes():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "itemElementTypes", theItemElementTypes), currentHashCode, theItemElementTypes, ((this.itemElementTypes!= null)&&(!this.itemElementTypes.isEmpty())));
        }
        {
            CurrentBorrowerDesired theCurrentBorrowerDesired;
            theCurrentBorrowerDesired = this.getCurrentBorrowerDesired();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currentBorrowerDesired", theCurrentBorrowerDesired), currentHashCode, theCurrentBorrowerDesired, (this.currentBorrowerDesired!= null));
        }
        {
            CurrentRequestersDesired theCurrentRequestersDesired;
            theCurrentRequestersDesired = this.getCurrentRequestersDesired();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currentRequestersDesired", theCurrentRequestersDesired), currentHashCode, theCurrentRequestersDesired, (this.currentRequestersDesired!= null));
        }
        {
            BigInteger theMaximumItemsCount;
            theMaximumItemsCount = this.getMaximumItemsCount();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "maximumItemsCount", theMaximumItemsCount), currentHashCode, theMaximumItemsCount, (this.maximumItemsCount!= null));
        }
        {
            String theNextItemToken;
            theNextItemToken = this.getNextItemToken();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "nextItemToken", theNextItemToken), currentHashCode, theNextItemToken, (this.nextItemToken!= null));
        }
        {
            Ext theExt;
            theExt = this.getExt();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ext", theExt), currentHashCode, theExt, (this.ext!= null));
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final LookupItemSet that = ((LookupItemSet) object);
        {
            InitiationHeader lhsInitiationHeader;
            lhsInitiationHeader = this.getInitiationHeader();
            InitiationHeader rhsInitiationHeader;
            rhsInitiationHeader = that.getInitiationHeader();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "initiationHeader", lhsInitiationHeader), LocatorUtils.property(thatLocator, "initiationHeader", rhsInitiationHeader), lhsInitiationHeader, rhsInitiationHeader, (this.initiationHeader!= null), (that.initiationHeader!= null))) {
                return false;
            }
        }
        {
            List<ItemId> lhsItemIds;
            lhsItemIds = (((this.itemIds!= null)&&(!this.itemIds.isEmpty()))?this.getItemIds():null);
            List<ItemId> rhsItemIds;
            rhsItemIds = (((that.itemIds!= null)&&(!that.itemIds.isEmpty()))?that.getItemIds():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "itemIds", lhsItemIds), LocatorUtils.property(thatLocator, "itemIds", rhsItemIds), lhsItemIds, rhsItemIds, ((this.itemIds!= null)&&(!this.itemIds.isEmpty())), ((that.itemIds!= null)&&(!that.itemIds.isEmpty())))) {
                return false;
            }
        }
        {
            List<String> lhsHoldingsSetIds;
            lhsHoldingsSetIds = (((this.holdingsSetIds!= null)&&(!this.holdingsSetIds.isEmpty()))?this.getHoldingsSetIds():null);
            List<String> rhsHoldingsSetIds;
            rhsHoldingsSetIds = (((that.holdingsSetIds!= null)&&(!that.holdingsSetIds.isEmpty()))?that.getHoldingsSetIds():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "holdingsSetIds", lhsHoldingsSetIds), LocatorUtils.property(thatLocator, "holdingsSetIds", rhsHoldingsSetIds), lhsHoldingsSetIds, rhsHoldingsSetIds, ((this.holdingsSetIds!= null)&&(!this.holdingsSetIds.isEmpty())), ((that.holdingsSetIds!= null)&&(!that.holdingsSetIds.isEmpty())))) {
                return false;
            }
        }
        {
            List<BibliographicId> lhsBibliographicIds;
            lhsBibliographicIds = (((this.bibliographicIds!= null)&&(!this.bibliographicIds.isEmpty()))?this.getBibliographicIds():null);
            List<BibliographicId> rhsBibliographicIds;
            rhsBibliographicIds = (((that.bibliographicIds!= null)&&(!that.bibliographicIds.isEmpty()))?that.getBibliographicIds():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "bibliographicIds", lhsBibliographicIds), LocatorUtils.property(thatLocator, "bibliographicIds", rhsBibliographicIds), lhsBibliographicIds, rhsBibliographicIds, ((this.bibliographicIds!= null)&&(!this.bibliographicIds.isEmpty())), ((that.bibliographicIds!= null)&&(!that.bibliographicIds.isEmpty())))) {
                return false;
            }
        }
        {
            List<SchemeValuePair> lhsItemElementTypes;
            lhsItemElementTypes = (((this.itemElementTypes!= null)&&(!this.itemElementTypes.isEmpty()))?this.getItemElementTypes():null);
            List<SchemeValuePair> rhsItemElementTypes;
            rhsItemElementTypes = (((that.itemElementTypes!= null)&&(!that.itemElementTypes.isEmpty()))?that.getItemElementTypes():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "itemElementTypes", lhsItemElementTypes), LocatorUtils.property(thatLocator, "itemElementTypes", rhsItemElementTypes), lhsItemElementTypes, rhsItemElementTypes, ((this.itemElementTypes!= null)&&(!this.itemElementTypes.isEmpty())), ((that.itemElementTypes!= null)&&(!that.itemElementTypes.isEmpty())))) {
                return false;
            }
        }
        {
            CurrentBorrowerDesired lhsCurrentBorrowerDesired;
            lhsCurrentBorrowerDesired = this.getCurrentBorrowerDesired();
            CurrentBorrowerDesired rhsCurrentBorrowerDesired;
            rhsCurrentBorrowerDesired = that.getCurrentBorrowerDesired();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "currentBorrowerDesired", lhsCurrentBorrowerDesired), LocatorUtils.property(thatLocator, "currentBorrowerDesired", rhsCurrentBorrowerDesired), lhsCurrentBorrowerDesired, rhsCurrentBorrowerDesired, (this.currentBorrowerDesired!= null), (that.currentBorrowerDesired!= null))) {
                return false;
            }
        }
        {
            CurrentRequestersDesired lhsCurrentRequestersDesired;
            lhsCurrentRequestersDesired = this.getCurrentRequestersDesired();
            CurrentRequestersDesired rhsCurrentRequestersDesired;
            rhsCurrentRequestersDesired = that.getCurrentRequestersDesired();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "currentRequestersDesired", lhsCurrentRequestersDesired), LocatorUtils.property(thatLocator, "currentRequestersDesired", rhsCurrentRequestersDesired), lhsCurrentRequestersDesired, rhsCurrentRequestersDesired, (this.currentRequestersDesired!= null), (that.currentRequestersDesired!= null))) {
                return false;
            }
        }
        {
            BigInteger lhsMaximumItemsCount;
            lhsMaximumItemsCount = this.getMaximumItemsCount();
            BigInteger rhsMaximumItemsCount;
            rhsMaximumItemsCount = that.getMaximumItemsCount();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "maximumItemsCount", lhsMaximumItemsCount), LocatorUtils.property(thatLocator, "maximumItemsCount", rhsMaximumItemsCount), lhsMaximumItemsCount, rhsMaximumItemsCount, (this.maximumItemsCount!= null), (that.maximumItemsCount!= null))) {
                return false;
            }
        }
        {
            String lhsNextItemToken;
            lhsNextItemToken = this.getNextItemToken();
            String rhsNextItemToken;
            rhsNextItemToken = that.getNextItemToken();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "nextItemToken", lhsNextItemToken), LocatorUtils.property(thatLocator, "nextItemToken", rhsNextItemToken), lhsNextItemToken, rhsNextItemToken, (this.nextItemToken!= null), (that.nextItemToken!= null))) {
                return false;
            }
        }
        {
            Ext lhsExt;
            lhsExt = this.getExt();
            Ext rhsExt;
            rhsExt = that.getExt();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ext", lhsExt), LocatorUtils.property(thatLocator, "ext", rhsExt), lhsExt, rhsExt, (this.ext!= null), (that.ext!= null))) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            InitiationHeader theInitiationHeader;
            theInitiationHeader = this.getInitiationHeader();
            strategy.appendField(locator, this, "initiationHeader", buffer, theInitiationHeader, (this.initiationHeader!= null));
        }
        {
            List<ItemId> theItemIds;
            theItemIds = (((this.itemIds!= null)&&(!this.itemIds.isEmpty()))?this.getItemIds():null);
            strategy.appendField(locator, this, "itemIds", buffer, theItemIds, ((this.itemIds!= null)&&(!this.itemIds.isEmpty())));
        }
        {
            List<String> theHoldingsSetIds;
            theHoldingsSetIds = (((this.holdingsSetIds!= null)&&(!this.holdingsSetIds.isEmpty()))?this.getHoldingsSetIds():null);
            strategy.appendField(locator, this, "holdingsSetIds", buffer, theHoldingsSetIds, ((this.holdingsSetIds!= null)&&(!this.holdingsSetIds.isEmpty())));
        }
        {
            List<BibliographicId> theBibliographicIds;
            theBibliographicIds = (((this.bibliographicIds!= null)&&(!this.bibliographicIds.isEmpty()))?this.getBibliographicIds():null);
            strategy.appendField(locator, this, "bibliographicIds", buffer, theBibliographicIds, ((this.bibliographicIds!= null)&&(!this.bibliographicIds.isEmpty())));
        }
        {
            List<SchemeValuePair> theItemElementTypes;
            theItemElementTypes = (((this.itemElementTypes!= null)&&(!this.itemElementTypes.isEmpty()))?this.getItemElementTypes():null);
            strategy.appendField(locator, this, "itemElementTypes", buffer, theItemElementTypes, ((this.itemElementTypes!= null)&&(!this.itemElementTypes.isEmpty())));
        }
        {
            CurrentBorrowerDesired theCurrentBorrowerDesired;
            theCurrentBorrowerDesired = this.getCurrentBorrowerDesired();
            strategy.appendField(locator, this, "currentBorrowerDesired", buffer, theCurrentBorrowerDesired, (this.currentBorrowerDesired!= null));
        }
        {
            CurrentRequestersDesired theCurrentRequestersDesired;
            theCurrentRequestersDesired = this.getCurrentRequestersDesired();
            strategy.appendField(locator, this, "currentRequestersDesired", buffer, theCurrentRequestersDesired, (this.currentRequestersDesired!= null));
        }
        {
            BigInteger theMaximumItemsCount;
            theMaximumItemsCount = this.getMaximumItemsCount();
            strategy.appendField(locator, this, "maximumItemsCount", buffer, theMaximumItemsCount, (this.maximumItemsCount!= null));
        }
        {
            String theNextItemToken;
            theNextItemToken = this.getNextItemToken();
            strategy.appendField(locator, this, "nextItemToken", buffer, theNextItemToken, (this.nextItemToken!= null));
        }
        {
            Ext theExt;
            theExt = this.getExt();
            strategy.appendField(locator, this, "ext", buffer, theExt, (this.ext!= null));
        }
        return buffer;
    }

}
