//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.03.12 at 09:54:26 AM CET 
//


package no.bibsys.alma.rest.ncip;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.datatype.XMLGregorianCalendar;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{http://www.niso.org/2008/ncip}InitiationHeader" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.niso.org/2008/ncip}UserId"/&gt;
 *         &lt;element ref="{http://www.niso.org/2008/ncip}NameInformation"/&gt;
 *         &lt;element ref="{http://www.niso.org/2008/ncip}UserAddressInformation" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.niso.org/2008/ncip}DateOfBirth" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.niso.org/2008/ncip}UserLanguage" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.niso.org/2008/ncip}UserPrivilege" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.niso.org/2008/ncip}BlockOrTrap" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.niso.org/2008/ncip}Ext" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "initiationHeader",
    "userId",
    "nameInformation",
    "userAddressInformations",
    "dateOfBirth",
    "userLanguages",
    "userPrivileges",
    "blockOrTraps",
    "ext"
})
@XmlRootElement(name = "UserCreated")
public class UserCreated implements Equals2, HashCode2, ToString2
{

    @XmlElement(name = "InitiationHeader")
    protected InitiationHeader initiationHeader;
    @XmlElement(name = "UserId", required = true)
    protected UserId userId;
    @XmlElement(name = "NameInformation", required = true)
    protected NameInformation nameInformation;
    @XmlElement(name = "UserAddressInformation")
    protected List<UserAddressInformation> userAddressInformations;
    @XmlElement(name = "DateOfBirth")
    @XmlSchemaType(name = "dateTime")
    protected XMLGregorianCalendar dateOfBirth;
    @XmlElement(name = "UserLanguage")
    protected List<SchemeValuePair> userLanguages;
    @XmlElement(name = "UserPrivilege")
    protected List<UserPrivilege> userPrivileges;
    @XmlElement(name = "BlockOrTrap")
    protected List<BlockOrTrap> blockOrTraps;
    @XmlElement(name = "Ext")
    protected Ext ext;

    /**
     * Gets the value of the initiationHeader property.
     * 
     * @return
     *     possible object is
     *     {@link InitiationHeader }
     *     
     */
    public InitiationHeader getInitiationHeader() {
        return initiationHeader;
    }

    /**
     * Sets the value of the initiationHeader property.
     * 
     * @param value
     *     allowed object is
     *     {@link InitiationHeader }
     *     
     */
    public void setInitiationHeader(InitiationHeader value) {
        this.initiationHeader = value;
    }

    /**
     * Gets the value of the userId property.
     * 
     * @return
     *     possible object is
     *     {@link UserId }
     *     
     */
    public UserId getUserId() {
        return userId;
    }

    /**
     * Sets the value of the userId property.
     * 
     * @param value
     *     allowed object is
     *     {@link UserId }
     *     
     */
    public void setUserId(UserId value) {
        this.userId = value;
    }

    /**
     * Gets the value of the nameInformation property.
     * 
     * @return
     *     possible object is
     *     {@link NameInformation }
     *     
     */
    public NameInformation getNameInformation() {
        return nameInformation;
    }

    /**
     * Sets the value of the nameInformation property.
     * 
     * @param value
     *     allowed object is
     *     {@link NameInformation }
     *     
     */
    public void setNameInformation(NameInformation value) {
        this.nameInformation = value;
    }

    /**
     * Gets the value of the userAddressInformations property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the userAddressInformations property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getUserAddressInformations().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link UserAddressInformation }
     * 
     * 
     */
    public List<UserAddressInformation> getUserAddressInformations() {
        if (userAddressInformations == null) {
            userAddressInformations = new ArrayList<UserAddressInformation>();
        }
        return this.userAddressInformations;
    }

    /**
     * Gets the value of the dateOfBirth property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getDateOfBirth() {
        return dateOfBirth;
    }

    /**
     * Sets the value of the dateOfBirth property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setDateOfBirth(XMLGregorianCalendar value) {
        this.dateOfBirth = value;
    }

    /**
     * Gets the value of the userLanguages property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the userLanguages property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getUserLanguages().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SchemeValuePair }
     * 
     * 
     */
    public List<SchemeValuePair> getUserLanguages() {
        if (userLanguages == null) {
            userLanguages = new ArrayList<SchemeValuePair>();
        }
        return this.userLanguages;
    }

    /**
     * Gets the value of the userPrivileges property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the userPrivileges property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getUserPrivileges().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link UserPrivilege }
     * 
     * 
     */
    public List<UserPrivilege> getUserPrivileges() {
        if (userPrivileges == null) {
            userPrivileges = new ArrayList<UserPrivilege>();
        }
        return this.userPrivileges;
    }

    /**
     * Gets the value of the blockOrTraps property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the blockOrTraps property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getBlockOrTraps().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link BlockOrTrap }
     * 
     * 
     */
    public List<BlockOrTrap> getBlockOrTraps() {
        if (blockOrTraps == null) {
            blockOrTraps = new ArrayList<BlockOrTrap>();
        }
        return this.blockOrTraps;
    }

    /**
     * Gets the value of the ext property.
     * 
     * @return
     *     possible object is
     *     {@link Ext }
     *     
     */
    public Ext getExt() {
        return ext;
    }

    /**
     * Sets the value of the ext property.
     * 
     * @param value
     *     allowed object is
     *     {@link Ext }
     *     
     */
    public void setExt(Ext value) {
        this.ext = value;
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = 1;
        {
            InitiationHeader theInitiationHeader;
            theInitiationHeader = this.getInitiationHeader();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "initiationHeader", theInitiationHeader), currentHashCode, theInitiationHeader, (this.initiationHeader!= null));
        }
        {
            UserId theUserId;
            theUserId = this.getUserId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "userId", theUserId), currentHashCode, theUserId, (this.userId!= null));
        }
        {
            NameInformation theNameInformation;
            theNameInformation = this.getNameInformation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "nameInformation", theNameInformation), currentHashCode, theNameInformation, (this.nameInformation!= null));
        }
        {
            List<UserAddressInformation> theUserAddressInformations;
            theUserAddressInformations = (((this.userAddressInformations!= null)&&(!this.userAddressInformations.isEmpty()))?this.getUserAddressInformations():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "userAddressInformations", theUserAddressInformations), currentHashCode, theUserAddressInformations, ((this.userAddressInformations!= null)&&(!this.userAddressInformations.isEmpty())));
        }
        {
            XMLGregorianCalendar theDateOfBirth;
            theDateOfBirth = this.getDateOfBirth();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dateOfBirth", theDateOfBirth), currentHashCode, theDateOfBirth, (this.dateOfBirth!= null));
        }
        {
            List<SchemeValuePair> theUserLanguages;
            theUserLanguages = (((this.userLanguages!= null)&&(!this.userLanguages.isEmpty()))?this.getUserLanguages():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "userLanguages", theUserLanguages), currentHashCode, theUserLanguages, ((this.userLanguages!= null)&&(!this.userLanguages.isEmpty())));
        }
        {
            List<UserPrivilege> theUserPrivileges;
            theUserPrivileges = (((this.userPrivileges!= null)&&(!this.userPrivileges.isEmpty()))?this.getUserPrivileges():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "userPrivileges", theUserPrivileges), currentHashCode, theUserPrivileges, ((this.userPrivileges!= null)&&(!this.userPrivileges.isEmpty())));
        }
        {
            List<BlockOrTrap> theBlockOrTraps;
            theBlockOrTraps = (((this.blockOrTraps!= null)&&(!this.blockOrTraps.isEmpty()))?this.getBlockOrTraps():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "blockOrTraps", theBlockOrTraps), currentHashCode, theBlockOrTraps, ((this.blockOrTraps!= null)&&(!this.blockOrTraps.isEmpty())));
        }
        {
            Ext theExt;
            theExt = this.getExt();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ext", theExt), currentHashCode, theExt, (this.ext!= null));
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final UserCreated that = ((UserCreated) object);
        {
            InitiationHeader lhsInitiationHeader;
            lhsInitiationHeader = this.getInitiationHeader();
            InitiationHeader rhsInitiationHeader;
            rhsInitiationHeader = that.getInitiationHeader();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "initiationHeader", lhsInitiationHeader), LocatorUtils.property(thatLocator, "initiationHeader", rhsInitiationHeader), lhsInitiationHeader, rhsInitiationHeader, (this.initiationHeader!= null), (that.initiationHeader!= null))) {
                return false;
            }
        }
        {
            UserId lhsUserId;
            lhsUserId = this.getUserId();
            UserId rhsUserId;
            rhsUserId = that.getUserId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "userId", lhsUserId), LocatorUtils.property(thatLocator, "userId", rhsUserId), lhsUserId, rhsUserId, (this.userId!= null), (that.userId!= null))) {
                return false;
            }
        }
        {
            NameInformation lhsNameInformation;
            lhsNameInformation = this.getNameInformation();
            NameInformation rhsNameInformation;
            rhsNameInformation = that.getNameInformation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "nameInformation", lhsNameInformation), LocatorUtils.property(thatLocator, "nameInformation", rhsNameInformation), lhsNameInformation, rhsNameInformation, (this.nameInformation!= null), (that.nameInformation!= null))) {
                return false;
            }
        }
        {
            List<UserAddressInformation> lhsUserAddressInformations;
            lhsUserAddressInformations = (((this.userAddressInformations!= null)&&(!this.userAddressInformations.isEmpty()))?this.getUserAddressInformations():null);
            List<UserAddressInformation> rhsUserAddressInformations;
            rhsUserAddressInformations = (((that.userAddressInformations!= null)&&(!that.userAddressInformations.isEmpty()))?that.getUserAddressInformations():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "userAddressInformations", lhsUserAddressInformations), LocatorUtils.property(thatLocator, "userAddressInformations", rhsUserAddressInformations), lhsUserAddressInformations, rhsUserAddressInformations, ((this.userAddressInformations!= null)&&(!this.userAddressInformations.isEmpty())), ((that.userAddressInformations!= null)&&(!that.userAddressInformations.isEmpty())))) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsDateOfBirth;
            lhsDateOfBirth = this.getDateOfBirth();
            XMLGregorianCalendar rhsDateOfBirth;
            rhsDateOfBirth = that.getDateOfBirth();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dateOfBirth", lhsDateOfBirth), LocatorUtils.property(thatLocator, "dateOfBirth", rhsDateOfBirth), lhsDateOfBirth, rhsDateOfBirth, (this.dateOfBirth!= null), (that.dateOfBirth!= null))) {
                return false;
            }
        }
        {
            List<SchemeValuePair> lhsUserLanguages;
            lhsUserLanguages = (((this.userLanguages!= null)&&(!this.userLanguages.isEmpty()))?this.getUserLanguages():null);
            List<SchemeValuePair> rhsUserLanguages;
            rhsUserLanguages = (((that.userLanguages!= null)&&(!that.userLanguages.isEmpty()))?that.getUserLanguages():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "userLanguages", lhsUserLanguages), LocatorUtils.property(thatLocator, "userLanguages", rhsUserLanguages), lhsUserLanguages, rhsUserLanguages, ((this.userLanguages!= null)&&(!this.userLanguages.isEmpty())), ((that.userLanguages!= null)&&(!that.userLanguages.isEmpty())))) {
                return false;
            }
        }
        {
            List<UserPrivilege> lhsUserPrivileges;
            lhsUserPrivileges = (((this.userPrivileges!= null)&&(!this.userPrivileges.isEmpty()))?this.getUserPrivileges():null);
            List<UserPrivilege> rhsUserPrivileges;
            rhsUserPrivileges = (((that.userPrivileges!= null)&&(!that.userPrivileges.isEmpty()))?that.getUserPrivileges():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "userPrivileges", lhsUserPrivileges), LocatorUtils.property(thatLocator, "userPrivileges", rhsUserPrivileges), lhsUserPrivileges, rhsUserPrivileges, ((this.userPrivileges!= null)&&(!this.userPrivileges.isEmpty())), ((that.userPrivileges!= null)&&(!that.userPrivileges.isEmpty())))) {
                return false;
            }
        }
        {
            List<BlockOrTrap> lhsBlockOrTraps;
            lhsBlockOrTraps = (((this.blockOrTraps!= null)&&(!this.blockOrTraps.isEmpty()))?this.getBlockOrTraps():null);
            List<BlockOrTrap> rhsBlockOrTraps;
            rhsBlockOrTraps = (((that.blockOrTraps!= null)&&(!that.blockOrTraps.isEmpty()))?that.getBlockOrTraps():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "blockOrTraps", lhsBlockOrTraps), LocatorUtils.property(thatLocator, "blockOrTraps", rhsBlockOrTraps), lhsBlockOrTraps, rhsBlockOrTraps, ((this.blockOrTraps!= null)&&(!this.blockOrTraps.isEmpty())), ((that.blockOrTraps!= null)&&(!that.blockOrTraps.isEmpty())))) {
                return false;
            }
        }
        {
            Ext lhsExt;
            lhsExt = this.getExt();
            Ext rhsExt;
            rhsExt = that.getExt();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ext", lhsExt), LocatorUtils.property(thatLocator, "ext", rhsExt), lhsExt, rhsExt, (this.ext!= null), (that.ext!= null))) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            InitiationHeader theInitiationHeader;
            theInitiationHeader = this.getInitiationHeader();
            strategy.appendField(locator, this, "initiationHeader", buffer, theInitiationHeader, (this.initiationHeader!= null));
        }
        {
            UserId theUserId;
            theUserId = this.getUserId();
            strategy.appendField(locator, this, "userId", buffer, theUserId, (this.userId!= null));
        }
        {
            NameInformation theNameInformation;
            theNameInformation = this.getNameInformation();
            strategy.appendField(locator, this, "nameInformation", buffer, theNameInformation, (this.nameInformation!= null));
        }
        {
            List<UserAddressInformation> theUserAddressInformations;
            theUserAddressInformations = (((this.userAddressInformations!= null)&&(!this.userAddressInformations.isEmpty()))?this.getUserAddressInformations():null);
            strategy.appendField(locator, this, "userAddressInformations", buffer, theUserAddressInformations, ((this.userAddressInformations!= null)&&(!this.userAddressInformations.isEmpty())));
        }
        {
            XMLGregorianCalendar theDateOfBirth;
            theDateOfBirth = this.getDateOfBirth();
            strategy.appendField(locator, this, "dateOfBirth", buffer, theDateOfBirth, (this.dateOfBirth!= null));
        }
        {
            List<SchemeValuePair> theUserLanguages;
            theUserLanguages = (((this.userLanguages!= null)&&(!this.userLanguages.isEmpty()))?this.getUserLanguages():null);
            strategy.appendField(locator, this, "userLanguages", buffer, theUserLanguages, ((this.userLanguages!= null)&&(!this.userLanguages.isEmpty())));
        }
        {
            List<UserPrivilege> theUserPrivileges;
            theUserPrivileges = (((this.userPrivileges!= null)&&(!this.userPrivileges.isEmpty()))?this.getUserPrivileges():null);
            strategy.appendField(locator, this, "userPrivileges", buffer, theUserPrivileges, ((this.userPrivileges!= null)&&(!this.userPrivileges.isEmpty())));
        }
        {
            List<BlockOrTrap> theBlockOrTraps;
            theBlockOrTraps = (((this.blockOrTraps!= null)&&(!this.blockOrTraps.isEmpty()))?this.getBlockOrTraps():null);
            strategy.appendField(locator, this, "blockOrTraps", buffer, theBlockOrTraps, ((this.blockOrTraps!= null)&&(!this.blockOrTraps.isEmpty())));
        }
        {
            Ext theExt;
            theExt = this.getExt();
            strategy.appendField(locator, this, "ext", buffer, theExt, (this.ext!= null));
        }
        return buffer;
    }

}
