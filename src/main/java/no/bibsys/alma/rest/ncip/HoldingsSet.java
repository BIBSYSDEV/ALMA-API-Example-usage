//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.03.12 at 09:54:26 AM CET 
//


package no.bibsys.alma.rest.ncip;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{http://www.niso.org/2008/ncip}HoldingsSetId" minOccurs="0"/&gt;
 *         &lt;choice&gt;
 *           &lt;sequence&gt;
 *             &lt;element ref="{http://www.niso.org/2008/ncip}BibliographicDescription" minOccurs="0"/&gt;
 *             &lt;element ref="{http://www.niso.org/2008/ncip}Location" minOccurs="0"/&gt;
 *             &lt;element ref="{http://www.niso.org/2008/ncip}CallNumber" minOccurs="0"/&gt;
 *             &lt;element ref="{http://www.niso.org/2008/ncip}SummaryHoldingsInformation" minOccurs="0"/&gt;
 *             &lt;element ref="{http://www.niso.org/2008/ncip}ElectronicResource" minOccurs="0"/&gt;
 *             &lt;element ref="{http://www.niso.org/2008/ncip}ItemInformation" maxOccurs="unbounded"/&gt;
 *             &lt;element ref="{http://www.niso.org/2008/ncip}Ext" minOccurs="0"/&gt;
 *           &lt;/sequence&gt;
 *           &lt;element ref="{http://www.niso.org/2008/ncip}Problem" maxOccurs="unbounded"/&gt;
 *         &lt;/choice&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "holdingsSetId",
    "problems",
    "bibliographicDescription",
    "location",
    "callNumber",
    "summaryHoldingsInformation",
    "electronicResource",
    "itemInformations",
    "ext"
})
@XmlRootElement(name = "HoldingsSet")
public class HoldingsSet implements Equals2, HashCode2, ToString2
{

    @XmlElement(name = "HoldingsSetId")
    protected String holdingsSetId;
    @XmlElement(name = "Problem")
    protected List<Problem> problems;
    @XmlElement(name = "BibliographicDescription")
    protected BibliographicDescription bibliographicDescription;
    @XmlElement(name = "Location")
    protected Location location;
    @XmlElement(name = "CallNumber")
    protected String callNumber;
    @XmlElement(name = "SummaryHoldingsInformation")
    protected SummaryHoldingsInformation summaryHoldingsInformation;
    @XmlElement(name = "ElectronicResource")
    protected ElectronicResource electronicResource;
    @XmlElement(name = "ItemInformation")
    protected List<ItemInformation> itemInformations;
    @XmlElement(name = "Ext")
    protected Ext ext;

    /**
     * Gets the value of the holdingsSetId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getHoldingsSetId() {
        return holdingsSetId;
    }

    /**
     * Sets the value of the holdingsSetId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setHoldingsSetId(String value) {
        this.holdingsSetId = value;
    }

    /**
     * Gets the value of the problems property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the problems property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getProblems().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Problem }
     * 
     * 
     */
    public List<Problem> getProblems() {
        if (problems == null) {
            problems = new ArrayList<Problem>();
        }
        return this.problems;
    }

    /**
     * Gets the value of the bibliographicDescription property.
     * 
     * @return
     *     possible object is
     *     {@link BibliographicDescription }
     *     
     */
    public BibliographicDescription getBibliographicDescription() {
        return bibliographicDescription;
    }

    /**
     * Sets the value of the bibliographicDescription property.
     * 
     * @param value
     *     allowed object is
     *     {@link BibliographicDescription }
     *     
     */
    public void setBibliographicDescription(BibliographicDescription value) {
        this.bibliographicDescription = value;
    }

    /**
     * Gets the value of the location property.
     * 
     * @return
     *     possible object is
     *     {@link Location }
     *     
     */
    public Location getLocation() {
        return location;
    }

    /**
     * Sets the value of the location property.
     * 
     * @param value
     *     allowed object is
     *     {@link Location }
     *     
     */
    public void setLocation(Location value) {
        this.location = value;
    }

    /**
     * Gets the value of the callNumber property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCallNumber() {
        return callNumber;
    }

    /**
     * Sets the value of the callNumber property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCallNumber(String value) {
        this.callNumber = value;
    }

    /**
     * Gets the value of the summaryHoldingsInformation property.
     * 
     * @return
     *     possible object is
     *     {@link SummaryHoldingsInformation }
     *     
     */
    public SummaryHoldingsInformation getSummaryHoldingsInformation() {
        return summaryHoldingsInformation;
    }

    /**
     * Sets the value of the summaryHoldingsInformation property.
     * 
     * @param value
     *     allowed object is
     *     {@link SummaryHoldingsInformation }
     *     
     */
    public void setSummaryHoldingsInformation(SummaryHoldingsInformation value) {
        this.summaryHoldingsInformation = value;
    }

    /**
     * Gets the value of the electronicResource property.
     * 
     * @return
     *     possible object is
     *     {@link ElectronicResource }
     *     
     */
    public ElectronicResource getElectronicResource() {
        return electronicResource;
    }

    /**
     * Sets the value of the electronicResource property.
     * 
     * @param value
     *     allowed object is
     *     {@link ElectronicResource }
     *     
     */
    public void setElectronicResource(ElectronicResource value) {
        this.electronicResource = value;
    }

    /**
     * Gets the value of the itemInformations property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the itemInformations property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getItemInformations().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ItemInformation }
     * 
     * 
     */
    public List<ItemInformation> getItemInformations() {
        if (itemInformations == null) {
            itemInformations = new ArrayList<ItemInformation>();
        }
        return this.itemInformations;
    }

    /**
     * Gets the value of the ext property.
     * 
     * @return
     *     possible object is
     *     {@link Ext }
     *     
     */
    public Ext getExt() {
        return ext;
    }

    /**
     * Sets the value of the ext property.
     * 
     * @param value
     *     allowed object is
     *     {@link Ext }
     *     
     */
    public void setExt(Ext value) {
        this.ext = value;
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = 1;
        {
            String theHoldingsSetId;
            theHoldingsSetId = this.getHoldingsSetId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "holdingsSetId", theHoldingsSetId), currentHashCode, theHoldingsSetId, (this.holdingsSetId!= null));
        }
        {
            List<Problem> theProblems;
            theProblems = (((this.problems!= null)&&(!this.problems.isEmpty()))?this.getProblems():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "problems", theProblems), currentHashCode, theProblems, ((this.problems!= null)&&(!this.problems.isEmpty())));
        }
        {
            BibliographicDescription theBibliographicDescription;
            theBibliographicDescription = this.getBibliographicDescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "bibliographicDescription", theBibliographicDescription), currentHashCode, theBibliographicDescription, (this.bibliographicDescription!= null));
        }
        {
            Location theLocation;
            theLocation = this.getLocation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "location", theLocation), currentHashCode, theLocation, (this.location!= null));
        }
        {
            String theCallNumber;
            theCallNumber = this.getCallNumber();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "callNumber", theCallNumber), currentHashCode, theCallNumber, (this.callNumber!= null));
        }
        {
            SummaryHoldingsInformation theSummaryHoldingsInformation;
            theSummaryHoldingsInformation = this.getSummaryHoldingsInformation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "summaryHoldingsInformation", theSummaryHoldingsInformation), currentHashCode, theSummaryHoldingsInformation, (this.summaryHoldingsInformation!= null));
        }
        {
            ElectronicResource theElectronicResource;
            theElectronicResource = this.getElectronicResource();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "electronicResource", theElectronicResource), currentHashCode, theElectronicResource, (this.electronicResource!= null));
        }
        {
            List<ItemInformation> theItemInformations;
            theItemInformations = (((this.itemInformations!= null)&&(!this.itemInformations.isEmpty()))?this.getItemInformations():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "itemInformations", theItemInformations), currentHashCode, theItemInformations, ((this.itemInformations!= null)&&(!this.itemInformations.isEmpty())));
        }
        {
            Ext theExt;
            theExt = this.getExt();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ext", theExt), currentHashCode, theExt, (this.ext!= null));
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final HoldingsSet that = ((HoldingsSet) object);
        {
            String lhsHoldingsSetId;
            lhsHoldingsSetId = this.getHoldingsSetId();
            String rhsHoldingsSetId;
            rhsHoldingsSetId = that.getHoldingsSetId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "holdingsSetId", lhsHoldingsSetId), LocatorUtils.property(thatLocator, "holdingsSetId", rhsHoldingsSetId), lhsHoldingsSetId, rhsHoldingsSetId, (this.holdingsSetId!= null), (that.holdingsSetId!= null))) {
                return false;
            }
        }
        {
            List<Problem> lhsProblems;
            lhsProblems = (((this.problems!= null)&&(!this.problems.isEmpty()))?this.getProblems():null);
            List<Problem> rhsProblems;
            rhsProblems = (((that.problems!= null)&&(!that.problems.isEmpty()))?that.getProblems():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "problems", lhsProblems), LocatorUtils.property(thatLocator, "problems", rhsProblems), lhsProblems, rhsProblems, ((this.problems!= null)&&(!this.problems.isEmpty())), ((that.problems!= null)&&(!that.problems.isEmpty())))) {
                return false;
            }
        }
        {
            BibliographicDescription lhsBibliographicDescription;
            lhsBibliographicDescription = this.getBibliographicDescription();
            BibliographicDescription rhsBibliographicDescription;
            rhsBibliographicDescription = that.getBibliographicDescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "bibliographicDescription", lhsBibliographicDescription), LocatorUtils.property(thatLocator, "bibliographicDescription", rhsBibliographicDescription), lhsBibliographicDescription, rhsBibliographicDescription, (this.bibliographicDescription!= null), (that.bibliographicDescription!= null))) {
                return false;
            }
        }
        {
            Location lhsLocation;
            lhsLocation = this.getLocation();
            Location rhsLocation;
            rhsLocation = that.getLocation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "location", lhsLocation), LocatorUtils.property(thatLocator, "location", rhsLocation), lhsLocation, rhsLocation, (this.location!= null), (that.location!= null))) {
                return false;
            }
        }
        {
            String lhsCallNumber;
            lhsCallNumber = this.getCallNumber();
            String rhsCallNumber;
            rhsCallNumber = that.getCallNumber();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "callNumber", lhsCallNumber), LocatorUtils.property(thatLocator, "callNumber", rhsCallNumber), lhsCallNumber, rhsCallNumber, (this.callNumber!= null), (that.callNumber!= null))) {
                return false;
            }
        }
        {
            SummaryHoldingsInformation lhsSummaryHoldingsInformation;
            lhsSummaryHoldingsInformation = this.getSummaryHoldingsInformation();
            SummaryHoldingsInformation rhsSummaryHoldingsInformation;
            rhsSummaryHoldingsInformation = that.getSummaryHoldingsInformation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "summaryHoldingsInformation", lhsSummaryHoldingsInformation), LocatorUtils.property(thatLocator, "summaryHoldingsInformation", rhsSummaryHoldingsInformation), lhsSummaryHoldingsInformation, rhsSummaryHoldingsInformation, (this.summaryHoldingsInformation!= null), (that.summaryHoldingsInformation!= null))) {
                return false;
            }
        }
        {
            ElectronicResource lhsElectronicResource;
            lhsElectronicResource = this.getElectronicResource();
            ElectronicResource rhsElectronicResource;
            rhsElectronicResource = that.getElectronicResource();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "electronicResource", lhsElectronicResource), LocatorUtils.property(thatLocator, "electronicResource", rhsElectronicResource), lhsElectronicResource, rhsElectronicResource, (this.electronicResource!= null), (that.electronicResource!= null))) {
                return false;
            }
        }
        {
            List<ItemInformation> lhsItemInformations;
            lhsItemInformations = (((this.itemInformations!= null)&&(!this.itemInformations.isEmpty()))?this.getItemInformations():null);
            List<ItemInformation> rhsItemInformations;
            rhsItemInformations = (((that.itemInformations!= null)&&(!that.itemInformations.isEmpty()))?that.getItemInformations():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "itemInformations", lhsItemInformations), LocatorUtils.property(thatLocator, "itemInformations", rhsItemInformations), lhsItemInformations, rhsItemInformations, ((this.itemInformations!= null)&&(!this.itemInformations.isEmpty())), ((that.itemInformations!= null)&&(!that.itemInformations.isEmpty())))) {
                return false;
            }
        }
        {
            Ext lhsExt;
            lhsExt = this.getExt();
            Ext rhsExt;
            rhsExt = that.getExt();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ext", lhsExt), LocatorUtils.property(thatLocator, "ext", rhsExt), lhsExt, rhsExt, (this.ext!= null), (that.ext!= null))) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            String theHoldingsSetId;
            theHoldingsSetId = this.getHoldingsSetId();
            strategy.appendField(locator, this, "holdingsSetId", buffer, theHoldingsSetId, (this.holdingsSetId!= null));
        }
        {
            List<Problem> theProblems;
            theProblems = (((this.problems!= null)&&(!this.problems.isEmpty()))?this.getProblems():null);
            strategy.appendField(locator, this, "problems", buffer, theProblems, ((this.problems!= null)&&(!this.problems.isEmpty())));
        }
        {
            BibliographicDescription theBibliographicDescription;
            theBibliographicDescription = this.getBibliographicDescription();
            strategy.appendField(locator, this, "bibliographicDescription", buffer, theBibliographicDescription, (this.bibliographicDescription!= null));
        }
        {
            Location theLocation;
            theLocation = this.getLocation();
            strategy.appendField(locator, this, "location", buffer, theLocation, (this.location!= null));
        }
        {
            String theCallNumber;
            theCallNumber = this.getCallNumber();
            strategy.appendField(locator, this, "callNumber", buffer, theCallNumber, (this.callNumber!= null));
        }
        {
            SummaryHoldingsInformation theSummaryHoldingsInformation;
            theSummaryHoldingsInformation = this.getSummaryHoldingsInformation();
            strategy.appendField(locator, this, "summaryHoldingsInformation", buffer, theSummaryHoldingsInformation, (this.summaryHoldingsInformation!= null));
        }
        {
            ElectronicResource theElectronicResource;
            theElectronicResource = this.getElectronicResource();
            strategy.appendField(locator, this, "electronicResource", buffer, theElectronicResource, (this.electronicResource!= null));
        }
        {
            List<ItemInformation> theItemInformations;
            theItemInformations = (((this.itemInformations!= null)&&(!this.itemInformations.isEmpty()))?this.getItemInformations():null);
            strategy.appendField(locator, this, "itemInformations", buffer, theItemInformations, ((this.itemInformations!= null)&&(!this.itemInformations.isEmpty())));
        }
        {
            Ext theExt;
            theExt = this.getExt();
            strategy.appendField(locator, this, "ext", buffer, theExt, (this.ext!= null));
        }
        return buffer;
    }

}
