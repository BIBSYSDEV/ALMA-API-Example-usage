//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.03.12 at 09:28:11 AM CET 
//


package no.bibsys.alma.rest.user;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * List of the user's roles.
 * 					SIS: roles are NOT part of the SIS load.
 * 					POST action: If list of roles is supplied- these will be the roles.
 * 					If list of roles was not supplied in the POST action, the user will be created with roles according to the role assignment rules
 * 					(General > User Management Configuration > Configuration Menu > Roles and Registration > Role Assignment Rules).
 * 					PUT action: If list of roles is supplied- it will replace the existing roles.
 * 					If list of roles was not supplied in the PUT action, the existing roles will be kept (note that the roles behavior is different than the other segments: all user segments are deleted if the incoming list is empty. Only roles are kept in such case).
 * 
 * 
 * <p>Java class for user_roles complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="user_roles"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="user_role" type="{}user_role" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "user_roles", propOrder = {
    "userRole"
})
public class UserRoles implements Serializable, Equals2, HashCode2, ToString2
{

    @XmlElement(name = "user_role")
    protected List<UserRole> userRole;

    /**
     * Gets the value of the userRole property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the userRole property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getUserRole().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link UserRole }
     * 
     * 
     */
    public List<UserRole> getUserRole() {
        if (userRole == null) {
            userRole = new ArrayList<UserRole>();
        }
        return this.userRole;
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = 1;
        {
            List<UserRole> theUserRole;
            theUserRole = (((this.userRole!= null)&&(!this.userRole.isEmpty()))?this.getUserRole():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "userRole", theUserRole), currentHashCode, theUserRole, ((this.userRole!= null)&&(!this.userRole.isEmpty())));
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final UserRoles that = ((UserRoles) object);
        {
            List<UserRole> lhsUserRole;
            lhsUserRole = (((this.userRole!= null)&&(!this.userRole.isEmpty()))?this.getUserRole():null);
            List<UserRole> rhsUserRole;
            rhsUserRole = (((that.userRole!= null)&&(!that.userRole.isEmpty()))?that.getUserRole():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "userRole", lhsUserRole), LocatorUtils.property(thatLocator, "userRole", rhsUserRole), lhsUserRole, rhsUserRole, ((this.userRole!= null)&&(!this.userRole.isEmpty())), ((that.userRole!= null)&&(!that.userRole.isEmpty())))) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            List<UserRole> theUserRole;
            theUserRole = (((this.userRole!= null)&&(!this.userRole.isEmpty()))?this.getUserRole():null);
            strategy.appendField(locator, this, "userRole", buffer, theUserRole, ((this.userRole!= null)&&(!this.userRole.isEmpty())));
        }
        return buffer;
    }

}
