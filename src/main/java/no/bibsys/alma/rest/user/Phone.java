//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.03.12 at 09:28:11 AM CET 
//


package no.bibsys.alma.rest.user;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Specific user's phone number.
 * 
 * <p>Java class for phone complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="phone"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;all&gt;
 *         &lt;element name="phone_number" type="{}string255Length"/&gt;
 *         &lt;element name="phone_types"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="phone_type" maxOccurs="unbounded" minOccurs="0"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;simpleContent&gt;
 *                         &lt;extension base="&lt;&gt;string255Length"&gt;
 *                           &lt;attribute name="desc" type="{}string4000Length" /&gt;
 *                         &lt;/extension&gt;
 *                       &lt;/simpleContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                 &lt;/sequence&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *       &lt;/all&gt;
 *       &lt;attribute name="preferred" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" /&gt;
 *       &lt;attribute name="preferred_sms" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" /&gt;
 *       &lt;attribute name="segment_type" type="{}string10Length" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "phone", propOrder = {

})
public class Phone implements Serializable, Equals2, HashCode2, ToString2
{

    @XmlElement(name = "phone_number", required = true)
    protected String phoneNumber;
    @XmlElement(name = "phone_types", required = true)
    protected PhoneTypes phoneTypes;
    @XmlAttribute(name = "preferred")
    protected Boolean preferred;
    @XmlAttribute(name = "preferred_sms")
    protected Boolean preferredSms;
    @XmlAttribute(name = "segment_type")
    protected String segmentType;

    /**
     * Gets the value of the phoneNumber property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPhoneNumber() {
        return phoneNumber;
    }

    /**
     * Sets the value of the phoneNumber property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPhoneNumber(String value) {
        this.phoneNumber = value;
    }

    /**
     * Gets the value of the phoneTypes property.
     * 
     * @return
     *     possible object is
     *     {@link PhoneTypes }
     *     
     */
    public PhoneTypes getPhoneTypes() {
        return phoneTypes;
    }

    /**
     * Sets the value of the phoneTypes property.
     * 
     * @param value
     *     allowed object is
     *     {@link PhoneTypes }
     *     
     */
    public void setPhoneTypes(PhoneTypes value) {
        this.phoneTypes = value;
    }

    /**
     * Gets the value of the preferred property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isPreferred() {
        if (preferred == null) {
            return false;
        } else {
            return preferred;
        }
    }

    /**
     * Sets the value of the preferred property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setPreferred(Boolean value) {
        this.preferred = value;
    }

    /**
     * Gets the value of the preferredSms property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isPreferredSms() {
        if (preferredSms == null) {
            return false;
        } else {
            return preferredSms;
        }
    }

    /**
     * Sets the value of the preferredSms property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setPreferredSms(Boolean value) {
        this.preferredSms = value;
    }

    /**
     * Gets the value of the segmentType property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSegmentType() {
        return segmentType;
    }

    /**
     * Sets the value of the segmentType property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSegmentType(String value) {
        this.segmentType = value;
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = 1;
        {
            String thePhoneNumber;
            thePhoneNumber = this.getPhoneNumber();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "phoneNumber", thePhoneNumber), currentHashCode, thePhoneNumber, (this.phoneNumber!= null));
        }
        {
            PhoneTypes thePhoneTypes;
            thePhoneTypes = this.getPhoneTypes();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "phoneTypes", thePhoneTypes), currentHashCode, thePhoneTypes, (this.phoneTypes!= null));
        }
        {
            boolean thePreferred;
            thePreferred = ((this.preferred!= null)?this.isPreferred():false);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "preferred", thePreferred), currentHashCode, thePreferred, (this.preferred!= null));
        }
        {
            boolean thePreferredSms;
            thePreferredSms = ((this.preferredSms!= null)?this.isPreferredSms():false);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "preferredSms", thePreferredSms), currentHashCode, thePreferredSms, (this.preferredSms!= null));
        }
        {
            String theSegmentType;
            theSegmentType = this.getSegmentType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "segmentType", theSegmentType), currentHashCode, theSegmentType, (this.segmentType!= null));
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final Phone that = ((Phone) object);
        {
            String lhsPhoneNumber;
            lhsPhoneNumber = this.getPhoneNumber();
            String rhsPhoneNumber;
            rhsPhoneNumber = that.getPhoneNumber();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "phoneNumber", lhsPhoneNumber), LocatorUtils.property(thatLocator, "phoneNumber", rhsPhoneNumber), lhsPhoneNumber, rhsPhoneNumber, (this.phoneNumber!= null), (that.phoneNumber!= null))) {
                return false;
            }
        }
        {
            PhoneTypes lhsPhoneTypes;
            lhsPhoneTypes = this.getPhoneTypes();
            PhoneTypes rhsPhoneTypes;
            rhsPhoneTypes = that.getPhoneTypes();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "phoneTypes", lhsPhoneTypes), LocatorUtils.property(thatLocator, "phoneTypes", rhsPhoneTypes), lhsPhoneTypes, rhsPhoneTypes, (this.phoneTypes!= null), (that.phoneTypes!= null))) {
                return false;
            }
        }
        {
            boolean lhsPreferred;
            lhsPreferred = ((this.preferred!= null)?this.isPreferred():false);
            boolean rhsPreferred;
            rhsPreferred = ((that.preferred!= null)?that.isPreferred():false);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "preferred", lhsPreferred), LocatorUtils.property(thatLocator, "preferred", rhsPreferred), lhsPreferred, rhsPreferred, (this.preferred!= null), (that.preferred!= null))) {
                return false;
            }
        }
        {
            boolean lhsPreferredSms;
            lhsPreferredSms = ((this.preferredSms!= null)?this.isPreferredSms():false);
            boolean rhsPreferredSms;
            rhsPreferredSms = ((that.preferredSms!= null)?that.isPreferredSms():false);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "preferredSms", lhsPreferredSms), LocatorUtils.property(thatLocator, "preferredSms", rhsPreferredSms), lhsPreferredSms, rhsPreferredSms, (this.preferredSms!= null), (that.preferredSms!= null))) {
                return false;
            }
        }
        {
            String lhsSegmentType;
            lhsSegmentType = this.getSegmentType();
            String rhsSegmentType;
            rhsSegmentType = that.getSegmentType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "segmentType", lhsSegmentType), LocatorUtils.property(thatLocator, "segmentType", rhsSegmentType), lhsSegmentType, rhsSegmentType, (this.segmentType!= null), (that.segmentType!= null))) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            String thePhoneNumber;
            thePhoneNumber = this.getPhoneNumber();
            strategy.appendField(locator, this, "phoneNumber", buffer, thePhoneNumber, (this.phoneNumber!= null));
        }
        {
            PhoneTypes thePhoneTypes;
            thePhoneTypes = this.getPhoneTypes();
            strategy.appendField(locator, this, "phoneTypes", buffer, thePhoneTypes, (this.phoneTypes!= null));
        }
        {
            boolean thePreferred;
            thePreferred = ((this.preferred!= null)?this.isPreferred():false);
            strategy.appendField(locator, this, "preferred", buffer, thePreferred, (this.preferred!= null));
        }
        {
            boolean thePreferredSms;
            thePreferredSms = ((this.preferredSms!= null)?this.isPreferredSms():false);
            strategy.appendField(locator, this, "preferredSms", buffer, thePreferredSms, (this.preferredSms!= null));
        }
        {
            String theSegmentType;
            theSegmentType = this.getSegmentType();
            strategy.appendField(locator, this, "segmentType", buffer, theSegmentType, (this.segmentType!= null));
        }
        return buffer;
    }


    /**
     * Phone types.
     * 
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="phone_type" maxOccurs="unbounded" minOccurs="0"&gt;
     *           &lt;complexType&gt;
     *             &lt;simpleContent&gt;
     *               &lt;extension base="&lt;&gt;string255Length"&gt;
     *                 &lt;attribute name="desc" type="{}string4000Length" /&gt;
     *               &lt;/extension&gt;
     *             &lt;/simpleContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "phoneType"
    })
    public static class PhoneTypes implements Serializable, Equals2, HashCode2, ToString2
    {

        @XmlElement(name = "phone_type")
        protected List<PhoneType> phoneType;

        /**
         * Gets the value of the phoneType property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the phoneType property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getPhoneType().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link PhoneType }
         * 
         * 
         */
        public List<PhoneType> getPhoneType() {
            if (phoneType == null) {
                phoneType = new ArrayList<PhoneType>();
            }
            return this.phoneType;
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
            int currentHashCode = 1;
            {
                List<PhoneType> thePhoneType;
                thePhoneType = (((this.phoneType!= null)&&(!this.phoneType.isEmpty()))?this.getPhoneType():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "phoneType", thePhoneType), currentHashCode, thePhoneType, ((this.phoneType!= null)&&(!this.phoneType.isEmpty())));
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
            if ((object == null)||(this.getClass()!= object.getClass())) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final PhoneTypes that = ((PhoneTypes) object);
            {
                List<PhoneType> lhsPhoneType;
                lhsPhoneType = (((this.phoneType!= null)&&(!this.phoneType.isEmpty()))?this.getPhoneType():null);
                List<PhoneType> rhsPhoneType;
                rhsPhoneType = (((that.phoneType!= null)&&(!that.phoneType.isEmpty()))?that.getPhoneType():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "phoneType", lhsPhoneType), LocatorUtils.property(thatLocator, "phoneType", rhsPhoneType), lhsPhoneType, rhsPhoneType, ((this.phoneType!= null)&&(!this.phoneType.isEmpty())), ((that.phoneType!= null)&&(!that.phoneType.isEmpty())))) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public String toString() {
            final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            {
                List<PhoneType> thePhoneType;
                thePhoneType = (((this.phoneType!= null)&&(!this.phoneType.isEmpty()))?this.getPhoneType():null);
                strategy.appendField(locator, this, "phoneType", buffer, thePhoneType, ((this.phoneType!= null)&&(!this.phoneType.isEmpty())));
            }
            return buffer;
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;simpleContent&gt;
         *     &lt;extension base="&lt;&gt;string255Length"&gt;
         *       &lt;attribute name="desc" type="{}string4000Length" /&gt;
         *     &lt;/extension&gt;
         *   &lt;/simpleContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "value"
        })
        public static class PhoneType implements Serializable, Equals2, HashCode2, ToString2
        {

            @XmlValue
            protected String value;
            @XmlAttribute(name = "desc")
            protected String desc;

            /**
             * Gets the value of the value property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getValue() {
                return value;
            }

            /**
             * Sets the value of the value property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setValue(String value) {
                this.value = value;
            }

            /**
             * Gets the value of the desc property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getDesc() {
                return desc;
            }

            /**
             * Sets the value of the desc property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setDesc(String value) {
                this.desc = value;
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
                int currentHashCode = 1;
                {
                    String theValue;
                    theValue = this.getValue();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "value", theValue), currentHashCode, theValue, (this.value!= null));
                }
                {
                    String theDesc;
                    theDesc = this.getDesc();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "desc", theDesc), currentHashCode, theDesc, (this.desc!= null));
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
                if ((object == null)||(this.getClass()!= object.getClass())) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final PhoneType that = ((PhoneType) object);
                {
                    String lhsValue;
                    lhsValue = this.getValue();
                    String rhsValue;
                    rhsValue = that.getValue();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "value", lhsValue), LocatorUtils.property(thatLocator, "value", rhsValue), lhsValue, rhsValue, (this.value!= null), (that.value!= null))) {
                        return false;
                    }
                }
                {
                    String lhsDesc;
                    lhsDesc = this.getDesc();
                    String rhsDesc;
                    rhsDesc = that.getDesc();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "desc", lhsDesc), LocatorUtils.property(thatLocator, "desc", rhsDesc), lhsDesc, rhsDesc, (this.desc!= null), (that.desc!= null))) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public String toString() {
                final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                {
                    String theValue;
                    theValue = this.getValue();
                    strategy.appendField(locator, this, "value", buffer, theValue, (this.value!= null));
                }
                {
                    String theDesc;
                    theDesc = this.getDesc();
                    strategy.appendField(locator, this, "desc", buffer, theDesc, (this.desc!= null));
                }
                return buffer;
            }

        }

    }

}
