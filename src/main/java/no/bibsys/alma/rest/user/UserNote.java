//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.03.12 at 09:28:11 AM CET 
//


package no.bibsys.alma.rest.user;

import java.io.Serializable;
import java.util.Calendar;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;
import org.w3._2001.xmlschema.Adapter1;


/**
 * Specific user's note.
 * 
 * <p>Java class for user_note complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="user_note"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;all&gt;
 *         &lt;element name="note_type"&gt;
 *           &lt;complexType&gt;
 *             &lt;simpleContent&gt;
 *               &lt;extension base="&lt;&gt;string255Length"&gt;
 *                 &lt;attribute name="desc" type="{}string4000Length" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/simpleContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="note_text" type="{}string2000Length" minOccurs="0"/&gt;
 *         &lt;element name="user_viewable" type="{http://www.w3.org/2001/XMLSchema}boolean"/&gt;
 *         &lt;element name="popup_note" type="{http://www.w3.org/2001/XMLSchema}boolean"/&gt;
 *         &lt;element name="created_by" type="{}string255Length" minOccurs="0"/&gt;
 *         &lt;element name="created_date" type="{http://www.w3.org/2001/XMLSchema}dateTime" minOccurs="0"/&gt;
 *       &lt;/all&gt;
 *       &lt;attribute name="segment_type" type="{}string10Length" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "user_note", propOrder = {

})
public class UserNote implements Serializable, Equals2, HashCode2, ToString2
{

    @XmlElement(name = "note_type", required = true)
    protected NoteType noteType;
    @XmlElement(name = "note_text")
    protected String noteText;
    @XmlElement(name = "user_viewable")
    protected boolean userViewable;
    @XmlElement(name = "popup_note")
    protected boolean popupNote;
    @XmlElement(name = "created_by")
    protected String createdBy;
    @XmlElement(name = "created_date", type = String.class)
    @XmlJavaTypeAdapter(Adapter1 .class)
    @XmlSchemaType(name = "dateTime")
    protected Calendar createdDate;
    @XmlAttribute(name = "segment_type")
    protected String segmentType;

    /**
     * Gets the value of the noteType property.
     * 
     * @return
     *     possible object is
     *     {@link NoteType }
     *     
     */
    public NoteType getNoteType() {
        return noteType;
    }

    /**
     * Sets the value of the noteType property.
     * 
     * @param value
     *     allowed object is
     *     {@link NoteType }
     *     
     */
    public void setNoteType(NoteType value) {
        this.noteType = value;
    }

    /**
     * Gets the value of the noteText property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getNoteText() {
        return noteText;
    }

    /**
     * Sets the value of the noteText property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setNoteText(String value) {
        this.noteText = value;
    }

    /**
     * Gets the value of the userViewable property.
     * 
     */
    public boolean isUserViewable() {
        return userViewable;
    }

    /**
     * Sets the value of the userViewable property.
     * 
     */
    public void setUserViewable(boolean value) {
        this.userViewable = value;
    }

    /**
     * Gets the value of the popupNote property.
     * 
     */
    public boolean isPopupNote() {
        return popupNote;
    }

    /**
     * Sets the value of the popupNote property.
     * 
     */
    public void setPopupNote(boolean value) {
        this.popupNote = value;
    }

    /**
     * Gets the value of the createdBy property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCreatedBy() {
        return createdBy;
    }

    /**
     * Sets the value of the createdBy property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCreatedBy(String value) {
        this.createdBy = value;
    }

    /**
     * Gets the value of the createdDate property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public Calendar getCreatedDate() {
        return createdDate;
    }

    /**
     * Sets the value of the createdDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCreatedDate(Calendar value) {
        this.createdDate = value;
    }

    /**
     * Gets the value of the segmentType property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSegmentType() {
        return segmentType;
    }

    /**
     * Sets the value of the segmentType property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSegmentType(String value) {
        this.segmentType = value;
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = 1;
        {
            NoteType theNoteType;
            theNoteType = this.getNoteType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "noteType", theNoteType), currentHashCode, theNoteType, (this.noteType!= null));
        }
        {
            String theNoteText;
            theNoteText = this.getNoteText();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "noteText", theNoteText), currentHashCode, theNoteText, (this.noteText!= null));
        }
        {
            boolean theUserViewable;
            theUserViewable = this.isUserViewable();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "userViewable", theUserViewable), currentHashCode, theUserViewable, true);
        }
        {
            boolean thePopupNote;
            thePopupNote = this.isPopupNote();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "popupNote", thePopupNote), currentHashCode, thePopupNote, true);
        }
        {
            String theCreatedBy;
            theCreatedBy = this.getCreatedBy();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "createdBy", theCreatedBy), currentHashCode, theCreatedBy, (this.createdBy!= null));
        }
        {
            Calendar theCreatedDate;
            theCreatedDate = this.getCreatedDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "createdDate", theCreatedDate), currentHashCode, theCreatedDate, (this.createdDate!= null));
        }
        {
            String theSegmentType;
            theSegmentType = this.getSegmentType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "segmentType", theSegmentType), currentHashCode, theSegmentType, (this.segmentType!= null));
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final UserNote that = ((UserNote) object);
        {
            NoteType lhsNoteType;
            lhsNoteType = this.getNoteType();
            NoteType rhsNoteType;
            rhsNoteType = that.getNoteType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "noteType", lhsNoteType), LocatorUtils.property(thatLocator, "noteType", rhsNoteType), lhsNoteType, rhsNoteType, (this.noteType!= null), (that.noteType!= null))) {
                return false;
            }
        }
        {
            String lhsNoteText;
            lhsNoteText = this.getNoteText();
            String rhsNoteText;
            rhsNoteText = that.getNoteText();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "noteText", lhsNoteText), LocatorUtils.property(thatLocator, "noteText", rhsNoteText), lhsNoteText, rhsNoteText, (this.noteText!= null), (that.noteText!= null))) {
                return false;
            }
        }
        {
            boolean lhsUserViewable;
            lhsUserViewable = this.isUserViewable();
            boolean rhsUserViewable;
            rhsUserViewable = that.isUserViewable();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "userViewable", lhsUserViewable), LocatorUtils.property(thatLocator, "userViewable", rhsUserViewable), lhsUserViewable, rhsUserViewable, true, true)) {
                return false;
            }
        }
        {
            boolean lhsPopupNote;
            lhsPopupNote = this.isPopupNote();
            boolean rhsPopupNote;
            rhsPopupNote = that.isPopupNote();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "popupNote", lhsPopupNote), LocatorUtils.property(thatLocator, "popupNote", rhsPopupNote), lhsPopupNote, rhsPopupNote, true, true)) {
                return false;
            }
        }
        {
            String lhsCreatedBy;
            lhsCreatedBy = this.getCreatedBy();
            String rhsCreatedBy;
            rhsCreatedBy = that.getCreatedBy();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "createdBy", lhsCreatedBy), LocatorUtils.property(thatLocator, "createdBy", rhsCreatedBy), lhsCreatedBy, rhsCreatedBy, (this.createdBy!= null), (that.createdBy!= null))) {
                return false;
            }
        }
        {
            Calendar lhsCreatedDate;
            lhsCreatedDate = this.getCreatedDate();
            Calendar rhsCreatedDate;
            rhsCreatedDate = that.getCreatedDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "createdDate", lhsCreatedDate), LocatorUtils.property(thatLocator, "createdDate", rhsCreatedDate), lhsCreatedDate, rhsCreatedDate, (this.createdDate!= null), (that.createdDate!= null))) {
                return false;
            }
        }
        {
            String lhsSegmentType;
            lhsSegmentType = this.getSegmentType();
            String rhsSegmentType;
            rhsSegmentType = that.getSegmentType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "segmentType", lhsSegmentType), LocatorUtils.property(thatLocator, "segmentType", rhsSegmentType), lhsSegmentType, rhsSegmentType, (this.segmentType!= null), (that.segmentType!= null))) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            NoteType theNoteType;
            theNoteType = this.getNoteType();
            strategy.appendField(locator, this, "noteType", buffer, theNoteType, (this.noteType!= null));
        }
        {
            String theNoteText;
            theNoteText = this.getNoteText();
            strategy.appendField(locator, this, "noteText", buffer, theNoteText, (this.noteText!= null));
        }
        {
            boolean theUserViewable;
            theUserViewable = this.isUserViewable();
            strategy.appendField(locator, this, "userViewable", buffer, theUserViewable, true);
        }
        {
            boolean thePopupNote;
            thePopupNote = this.isPopupNote();
            strategy.appendField(locator, this, "popupNote", buffer, thePopupNote, true);
        }
        {
            String theCreatedBy;
            theCreatedBy = this.getCreatedBy();
            strategy.appendField(locator, this, "createdBy", buffer, theCreatedBy, (this.createdBy!= null));
        }
        {
            Calendar theCreatedDate;
            theCreatedDate = this.getCreatedDate();
            strategy.appendField(locator, this, "createdDate", buffer, theCreatedDate, (this.createdDate!= null));
        }
        {
            String theSegmentType;
            theSegmentType = this.getSegmentType();
            strategy.appendField(locator, this, "segmentType", buffer, theSegmentType, (this.segmentType!= null));
        }
        return buffer;
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;simpleContent&gt;
     *     &lt;extension base="&lt;&gt;string255Length"&gt;
     *       &lt;attribute name="desc" type="{}string4000Length" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/simpleContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "value"
    })
    public static class NoteType implements Serializable, Equals2, HashCode2, ToString2
    {

        @XmlValue
        protected String value;
        @XmlAttribute(name = "desc")
        protected String desc;

        /**
         * Gets the value of the value property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getValue() {
            return value;
        }

        /**
         * Sets the value of the value property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setValue(String value) {
            this.value = value;
        }

        /**
         * Gets the value of the desc property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getDesc() {
            return desc;
        }

        /**
         * Sets the value of the desc property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setDesc(String value) {
            this.desc = value;
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
            int currentHashCode = 1;
            {
                String theValue;
                theValue = this.getValue();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "value", theValue), currentHashCode, theValue, (this.value!= null));
            }
            {
                String theDesc;
                theDesc = this.getDesc();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "desc", theDesc), currentHashCode, theDesc, (this.desc!= null));
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
            if ((object == null)||(this.getClass()!= object.getClass())) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final NoteType that = ((NoteType) object);
            {
                String lhsValue;
                lhsValue = this.getValue();
                String rhsValue;
                rhsValue = that.getValue();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "value", lhsValue), LocatorUtils.property(thatLocator, "value", rhsValue), lhsValue, rhsValue, (this.value!= null), (that.value!= null))) {
                    return false;
                }
            }
            {
                String lhsDesc;
                lhsDesc = this.getDesc();
                String rhsDesc;
                rhsDesc = that.getDesc();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "desc", lhsDesc), LocatorUtils.property(thatLocator, "desc", rhsDesc), lhsDesc, rhsDesc, (this.desc!= null), (that.desc!= null))) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public String toString() {
            final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            {
                String theValue;
                theValue = this.getValue();
                strategy.appendField(locator, this, "value", buffer, theValue, (this.value!= null));
            }
            {
                String theDesc;
                theDesc = this.getDesc();
                strategy.appendField(locator, this, "desc", buffer, theDesc, (this.desc!= null));
            }
            return buffer;
        }

    }

}
