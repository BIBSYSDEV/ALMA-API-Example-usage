//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.03.12 at 09:28:09 AM CET 
//


package no.bibsys.alma.rest.partner;

import java.io.Serializable;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * NCIP_P2P related details. Relevant and mandatory only if profile_type = NCIP_P2P.
 * 
 * <p>Java class for ncip_p2p_details complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ncip_p2p_details"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;all&gt;
 *         &lt;element name="alternative_document_delivery" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/&gt;
 *         &lt;element name="general_user_id_type" type="{}general_user_id_type"/&gt;
 *         &lt;element name="ill_server" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="institution_code" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/&gt;
 *         &lt;element name="partner_symbol" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="request_expiry_type" type="{}request_expiry_type"/&gt;
 *         &lt;element name="expiry_time" type="{http://www.w3.org/2001/XMLSchema}int" minOccurs="0"/&gt;
 *         &lt;element name="send_requester_information" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/&gt;
 *         &lt;element name="email_address" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="resending_overdue_message_interval" type="{http://www.w3.org/2001/XMLSchema}int" minOccurs="0"/&gt;
 *       &lt;/all&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ncip_p2p_details", propOrder = {

})
public class NcipP2PDetails implements Serializable, Equals2, HashCode2, ToString2
{

    @XmlElement(name = "alternative_document_delivery", defaultValue = "false")
    protected Boolean alternativeDocumentDelivery;
    @XmlElement(name = "general_user_id_type", required = true)
    protected GeneralUserIdType generalUserIdType;
    @XmlElement(name = "ill_server", required = true)
    protected String illServer;
    @XmlElement(name = "institution_code")
    protected String institutionCode;
    @XmlElement(name = "partner_symbol", required = true)
    protected String partnerSymbol;
    @XmlElement(name = "request_expiry_type", required = true)
    protected RequestExpiryType requestExpiryType;
    @XmlElement(name = "expiry_time")
    protected Integer expiryTime;
    @XmlElement(name = "send_requester_information", defaultValue = "false")
    protected Boolean sendRequesterInformation;
    @XmlElement(name = "email_address", required = true)
    protected String emailAddress;
    @XmlElement(name = "resending_overdue_message_interval", defaultValue = "0")
    protected Integer resendingOverdueMessageInterval;

    /**
     * Gets the value of the alternativeDocumentDelivery property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isAlternativeDocumentDelivery() {
        return alternativeDocumentDelivery;
    }

    /**
     * Sets the value of the alternativeDocumentDelivery property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setAlternativeDocumentDelivery(Boolean value) {
        this.alternativeDocumentDelivery = value;
    }

    /**
     * Gets the value of the generalUserIdType property.
     * 
     * @return
     *     possible object is
     *     {@link GeneralUserIdType }
     *     
     */
    public GeneralUserIdType getGeneralUserIdType() {
        return generalUserIdType;
    }

    /**
     * Sets the value of the generalUserIdType property.
     * 
     * @param value
     *     allowed object is
     *     {@link GeneralUserIdType }
     *     
     */
    public void setGeneralUserIdType(GeneralUserIdType value) {
        this.generalUserIdType = value;
    }

    /**
     * Gets the value of the illServer property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIllServer() {
        return illServer;
    }

    /**
     * Sets the value of the illServer property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIllServer(String value) {
        this.illServer = value;
    }

    /**
     * Gets the value of the institutionCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getInstitutionCode() {
        return institutionCode;
    }

    /**
     * Sets the value of the institutionCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setInstitutionCode(String value) {
        this.institutionCode = value;
    }

    /**
     * Gets the value of the partnerSymbol property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPartnerSymbol() {
        return partnerSymbol;
    }

    /**
     * Sets the value of the partnerSymbol property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPartnerSymbol(String value) {
        this.partnerSymbol = value;
    }

    /**
     * Gets the value of the requestExpiryType property.
     * 
     * @return
     *     possible object is
     *     {@link RequestExpiryType }
     *     
     */
    public RequestExpiryType getRequestExpiryType() {
        return requestExpiryType;
    }

    /**
     * Sets the value of the requestExpiryType property.
     * 
     * @param value
     *     allowed object is
     *     {@link RequestExpiryType }
     *     
     */
    public void setRequestExpiryType(RequestExpiryType value) {
        this.requestExpiryType = value;
    }

    /**
     * Gets the value of the expiryTime property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getExpiryTime() {
        return expiryTime;
    }

    /**
     * Sets the value of the expiryTime property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setExpiryTime(Integer value) {
        this.expiryTime = value;
    }

    /**
     * Gets the value of the sendRequesterInformation property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isSendRequesterInformation() {
        return sendRequesterInformation;
    }

    /**
     * Sets the value of the sendRequesterInformation property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setSendRequesterInformation(Boolean value) {
        this.sendRequesterInformation = value;
    }

    /**
     * Gets the value of the emailAddress property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getEmailAddress() {
        return emailAddress;
    }

    /**
     * Sets the value of the emailAddress property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setEmailAddress(String value) {
        this.emailAddress = value;
    }

    /**
     * Gets the value of the resendingOverdueMessageInterval property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getResendingOverdueMessageInterval() {
        return resendingOverdueMessageInterval;
    }

    /**
     * Sets the value of the resendingOverdueMessageInterval property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setResendingOverdueMessageInterval(Integer value) {
        this.resendingOverdueMessageInterval = value;
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = 1;
        {
            Boolean theAlternativeDocumentDelivery;
            theAlternativeDocumentDelivery = this.isAlternativeDocumentDelivery();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "alternativeDocumentDelivery", theAlternativeDocumentDelivery), currentHashCode, theAlternativeDocumentDelivery, (this.alternativeDocumentDelivery!= null));
        }
        {
            GeneralUserIdType theGeneralUserIdType;
            theGeneralUserIdType = this.getGeneralUserIdType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "generalUserIdType", theGeneralUserIdType), currentHashCode, theGeneralUserIdType, (this.generalUserIdType!= null));
        }
        {
            String theIllServer;
            theIllServer = this.getIllServer();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "illServer", theIllServer), currentHashCode, theIllServer, (this.illServer!= null));
        }
        {
            String theInstitutionCode;
            theInstitutionCode = this.getInstitutionCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "institutionCode", theInstitutionCode), currentHashCode, theInstitutionCode, (this.institutionCode!= null));
        }
        {
            String thePartnerSymbol;
            thePartnerSymbol = this.getPartnerSymbol();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "partnerSymbol", thePartnerSymbol), currentHashCode, thePartnerSymbol, (this.partnerSymbol!= null));
        }
        {
            RequestExpiryType theRequestExpiryType;
            theRequestExpiryType = this.getRequestExpiryType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "requestExpiryType", theRequestExpiryType), currentHashCode, theRequestExpiryType, (this.requestExpiryType!= null));
        }
        {
            Integer theExpiryTime;
            theExpiryTime = this.getExpiryTime();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "expiryTime", theExpiryTime), currentHashCode, theExpiryTime, (this.expiryTime!= null));
        }
        {
            Boolean theSendRequesterInformation;
            theSendRequesterInformation = this.isSendRequesterInformation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sendRequesterInformation", theSendRequesterInformation), currentHashCode, theSendRequesterInformation, (this.sendRequesterInformation!= null));
        }
        {
            String theEmailAddress;
            theEmailAddress = this.getEmailAddress();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "emailAddress", theEmailAddress), currentHashCode, theEmailAddress, (this.emailAddress!= null));
        }
        {
            Integer theResendingOverdueMessageInterval;
            theResendingOverdueMessageInterval = this.getResendingOverdueMessageInterval();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "resendingOverdueMessageInterval", theResendingOverdueMessageInterval), currentHashCode, theResendingOverdueMessageInterval, (this.resendingOverdueMessageInterval!= null));
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final NcipP2PDetails that = ((NcipP2PDetails) object);
        {
            Boolean lhsAlternativeDocumentDelivery;
            lhsAlternativeDocumentDelivery = this.isAlternativeDocumentDelivery();
            Boolean rhsAlternativeDocumentDelivery;
            rhsAlternativeDocumentDelivery = that.isAlternativeDocumentDelivery();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "alternativeDocumentDelivery", lhsAlternativeDocumentDelivery), LocatorUtils.property(thatLocator, "alternativeDocumentDelivery", rhsAlternativeDocumentDelivery), lhsAlternativeDocumentDelivery, rhsAlternativeDocumentDelivery, (this.alternativeDocumentDelivery!= null), (that.alternativeDocumentDelivery!= null))) {
                return false;
            }
        }
        {
            GeneralUserIdType lhsGeneralUserIdType;
            lhsGeneralUserIdType = this.getGeneralUserIdType();
            GeneralUserIdType rhsGeneralUserIdType;
            rhsGeneralUserIdType = that.getGeneralUserIdType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "generalUserIdType", lhsGeneralUserIdType), LocatorUtils.property(thatLocator, "generalUserIdType", rhsGeneralUserIdType), lhsGeneralUserIdType, rhsGeneralUserIdType, (this.generalUserIdType!= null), (that.generalUserIdType!= null))) {
                return false;
            }
        }
        {
            String lhsIllServer;
            lhsIllServer = this.getIllServer();
            String rhsIllServer;
            rhsIllServer = that.getIllServer();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "illServer", lhsIllServer), LocatorUtils.property(thatLocator, "illServer", rhsIllServer), lhsIllServer, rhsIllServer, (this.illServer!= null), (that.illServer!= null))) {
                return false;
            }
        }
        {
            String lhsInstitutionCode;
            lhsInstitutionCode = this.getInstitutionCode();
            String rhsInstitutionCode;
            rhsInstitutionCode = that.getInstitutionCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "institutionCode", lhsInstitutionCode), LocatorUtils.property(thatLocator, "institutionCode", rhsInstitutionCode), lhsInstitutionCode, rhsInstitutionCode, (this.institutionCode!= null), (that.institutionCode!= null))) {
                return false;
            }
        }
        {
            String lhsPartnerSymbol;
            lhsPartnerSymbol = this.getPartnerSymbol();
            String rhsPartnerSymbol;
            rhsPartnerSymbol = that.getPartnerSymbol();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "partnerSymbol", lhsPartnerSymbol), LocatorUtils.property(thatLocator, "partnerSymbol", rhsPartnerSymbol), lhsPartnerSymbol, rhsPartnerSymbol, (this.partnerSymbol!= null), (that.partnerSymbol!= null))) {
                return false;
            }
        }
        {
            RequestExpiryType lhsRequestExpiryType;
            lhsRequestExpiryType = this.getRequestExpiryType();
            RequestExpiryType rhsRequestExpiryType;
            rhsRequestExpiryType = that.getRequestExpiryType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "requestExpiryType", lhsRequestExpiryType), LocatorUtils.property(thatLocator, "requestExpiryType", rhsRequestExpiryType), lhsRequestExpiryType, rhsRequestExpiryType, (this.requestExpiryType!= null), (that.requestExpiryType!= null))) {
                return false;
            }
        }
        {
            Integer lhsExpiryTime;
            lhsExpiryTime = this.getExpiryTime();
            Integer rhsExpiryTime;
            rhsExpiryTime = that.getExpiryTime();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "expiryTime", lhsExpiryTime), LocatorUtils.property(thatLocator, "expiryTime", rhsExpiryTime), lhsExpiryTime, rhsExpiryTime, (this.expiryTime!= null), (that.expiryTime!= null))) {
                return false;
            }
        }
        {
            Boolean lhsSendRequesterInformation;
            lhsSendRequesterInformation = this.isSendRequesterInformation();
            Boolean rhsSendRequesterInformation;
            rhsSendRequesterInformation = that.isSendRequesterInformation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sendRequesterInformation", lhsSendRequesterInformation), LocatorUtils.property(thatLocator, "sendRequesterInformation", rhsSendRequesterInformation), lhsSendRequesterInformation, rhsSendRequesterInformation, (this.sendRequesterInformation!= null), (that.sendRequesterInformation!= null))) {
                return false;
            }
        }
        {
            String lhsEmailAddress;
            lhsEmailAddress = this.getEmailAddress();
            String rhsEmailAddress;
            rhsEmailAddress = that.getEmailAddress();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "emailAddress", lhsEmailAddress), LocatorUtils.property(thatLocator, "emailAddress", rhsEmailAddress), lhsEmailAddress, rhsEmailAddress, (this.emailAddress!= null), (that.emailAddress!= null))) {
                return false;
            }
        }
        {
            Integer lhsResendingOverdueMessageInterval;
            lhsResendingOverdueMessageInterval = this.getResendingOverdueMessageInterval();
            Integer rhsResendingOverdueMessageInterval;
            rhsResendingOverdueMessageInterval = that.getResendingOverdueMessageInterval();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "resendingOverdueMessageInterval", lhsResendingOverdueMessageInterval), LocatorUtils.property(thatLocator, "resendingOverdueMessageInterval", rhsResendingOverdueMessageInterval), lhsResendingOverdueMessageInterval, rhsResendingOverdueMessageInterval, (this.resendingOverdueMessageInterval!= null), (that.resendingOverdueMessageInterval!= null))) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            Boolean theAlternativeDocumentDelivery;
            theAlternativeDocumentDelivery = this.isAlternativeDocumentDelivery();
            strategy.appendField(locator, this, "alternativeDocumentDelivery", buffer, theAlternativeDocumentDelivery, (this.alternativeDocumentDelivery!= null));
        }
        {
            GeneralUserIdType theGeneralUserIdType;
            theGeneralUserIdType = this.getGeneralUserIdType();
            strategy.appendField(locator, this, "generalUserIdType", buffer, theGeneralUserIdType, (this.generalUserIdType!= null));
        }
        {
            String theIllServer;
            theIllServer = this.getIllServer();
            strategy.appendField(locator, this, "illServer", buffer, theIllServer, (this.illServer!= null));
        }
        {
            String theInstitutionCode;
            theInstitutionCode = this.getInstitutionCode();
            strategy.appendField(locator, this, "institutionCode", buffer, theInstitutionCode, (this.institutionCode!= null));
        }
        {
            String thePartnerSymbol;
            thePartnerSymbol = this.getPartnerSymbol();
            strategy.appendField(locator, this, "partnerSymbol", buffer, thePartnerSymbol, (this.partnerSymbol!= null));
        }
        {
            RequestExpiryType theRequestExpiryType;
            theRequestExpiryType = this.getRequestExpiryType();
            strategy.appendField(locator, this, "requestExpiryType", buffer, theRequestExpiryType, (this.requestExpiryType!= null));
        }
        {
            Integer theExpiryTime;
            theExpiryTime = this.getExpiryTime();
            strategy.appendField(locator, this, "expiryTime", buffer, theExpiryTime, (this.expiryTime!= null));
        }
        {
            Boolean theSendRequesterInformation;
            theSendRequesterInformation = this.isSendRequesterInformation();
            strategy.appendField(locator, this, "sendRequesterInformation", buffer, theSendRequesterInformation, (this.sendRequesterInformation!= null));
        }
        {
            String theEmailAddress;
            theEmailAddress = this.getEmailAddress();
            strategy.appendField(locator, this, "emailAddress", buffer, theEmailAddress, (this.emailAddress!= null));
        }
        {
            Integer theResendingOverdueMessageInterval;
            theResendingOverdueMessageInterval = this.getResendingOverdueMessageInterval();
            strategy.appendField(locator, this, "resendingOverdueMessageInterval", buffer, theResendingOverdueMessageInterval, (this.resendingOverdueMessageInterval!= null));
        }
        return buffer;
    }

}
