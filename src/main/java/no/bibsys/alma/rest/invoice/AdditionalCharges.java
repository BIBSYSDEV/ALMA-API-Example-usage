//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.03.12 at 09:28:07 AM CET 
//


package no.bibsys.alma.rest.invoice;

import java.io.Serializable;
import java.math.BigDecimal;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Additional charges that are included in the invoice.
 * 
 * <p>Java class for additional_charges complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="additional_charges"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;all&gt;
 *         &lt;element name="use_pro_rata" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/&gt;
 *         &lt;element name="shipment" type="{http://www.w3.org/2001/XMLSchema}decimal" minOccurs="0"/&gt;
 *         &lt;element name="overhead" type="{http://www.w3.org/2001/XMLSchema}decimal" minOccurs="0"/&gt;
 *         &lt;element name="insurance" type="{http://www.w3.org/2001/XMLSchema}decimal" minOccurs="0"/&gt;
 *         &lt;element name="discount" type="{http://www.w3.org/2001/XMLSchema}decimal" minOccurs="0"/&gt;
 *       &lt;/all&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "additional_charges", propOrder = {

})
public class AdditionalCharges implements Serializable, Equals2, HashCode2, ToString2
{

    @XmlElement(name = "use_pro_rata")
    protected Boolean useProRata;
    protected BigDecimal shipment;
    protected BigDecimal overhead;
    protected BigDecimal insurance;
    protected BigDecimal discount;

    /**
     * Gets the value of the useProRata property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isUseProRata() {
        return useProRata;
    }

    /**
     * Sets the value of the useProRata property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setUseProRata(Boolean value) {
        this.useProRata = value;
    }

    /**
     * Gets the value of the shipment property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getShipment() {
        return shipment;
    }

    /**
     * Sets the value of the shipment property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setShipment(BigDecimal value) {
        this.shipment = value;
    }

    /**
     * Gets the value of the overhead property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getOverhead() {
        return overhead;
    }

    /**
     * Sets the value of the overhead property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setOverhead(BigDecimal value) {
        this.overhead = value;
    }

    /**
     * Gets the value of the insurance property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getInsurance() {
        return insurance;
    }

    /**
     * Sets the value of the insurance property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setInsurance(BigDecimal value) {
        this.insurance = value;
    }

    /**
     * Gets the value of the discount property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getDiscount() {
        return discount;
    }

    /**
     * Sets the value of the discount property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setDiscount(BigDecimal value) {
        this.discount = value;
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = 1;
        {
            Boolean theUseProRata;
            theUseProRata = this.isUseProRata();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "useProRata", theUseProRata), currentHashCode, theUseProRata, (this.useProRata!= null));
        }
        {
            BigDecimal theShipment;
            theShipment = this.getShipment();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shipment", theShipment), currentHashCode, theShipment, (this.shipment!= null));
        }
        {
            BigDecimal theOverhead;
            theOverhead = this.getOverhead();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "overhead", theOverhead), currentHashCode, theOverhead, (this.overhead!= null));
        }
        {
            BigDecimal theInsurance;
            theInsurance = this.getInsurance();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "insurance", theInsurance), currentHashCode, theInsurance, (this.insurance!= null));
        }
        {
            BigDecimal theDiscount;
            theDiscount = this.getDiscount();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "discount", theDiscount), currentHashCode, theDiscount, (this.discount!= null));
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final AdditionalCharges that = ((AdditionalCharges) object);
        {
            Boolean lhsUseProRata;
            lhsUseProRata = this.isUseProRata();
            Boolean rhsUseProRata;
            rhsUseProRata = that.isUseProRata();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "useProRata", lhsUseProRata), LocatorUtils.property(thatLocator, "useProRata", rhsUseProRata), lhsUseProRata, rhsUseProRata, (this.useProRata!= null), (that.useProRata!= null))) {
                return false;
            }
        }
        {
            BigDecimal lhsShipment;
            lhsShipment = this.getShipment();
            BigDecimal rhsShipment;
            rhsShipment = that.getShipment();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "shipment", lhsShipment), LocatorUtils.property(thatLocator, "shipment", rhsShipment), lhsShipment, rhsShipment, (this.shipment!= null), (that.shipment!= null))) {
                return false;
            }
        }
        {
            BigDecimal lhsOverhead;
            lhsOverhead = this.getOverhead();
            BigDecimal rhsOverhead;
            rhsOverhead = that.getOverhead();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "overhead", lhsOverhead), LocatorUtils.property(thatLocator, "overhead", rhsOverhead), lhsOverhead, rhsOverhead, (this.overhead!= null), (that.overhead!= null))) {
                return false;
            }
        }
        {
            BigDecimal lhsInsurance;
            lhsInsurance = this.getInsurance();
            BigDecimal rhsInsurance;
            rhsInsurance = that.getInsurance();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "insurance", lhsInsurance), LocatorUtils.property(thatLocator, "insurance", rhsInsurance), lhsInsurance, rhsInsurance, (this.insurance!= null), (that.insurance!= null))) {
                return false;
            }
        }
        {
            BigDecimal lhsDiscount;
            lhsDiscount = this.getDiscount();
            BigDecimal rhsDiscount;
            rhsDiscount = that.getDiscount();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "discount", lhsDiscount), LocatorUtils.property(thatLocator, "discount", rhsDiscount), lhsDiscount, rhsDiscount, (this.discount!= null), (that.discount!= null))) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            Boolean theUseProRata;
            theUseProRata = this.isUseProRata();
            strategy.appendField(locator, this, "useProRata", buffer, theUseProRata, (this.useProRata!= null));
        }
        {
            BigDecimal theShipment;
            theShipment = this.getShipment();
            strategy.appendField(locator, this, "shipment", buffer, theShipment, (this.shipment!= null));
        }
        {
            BigDecimal theOverhead;
            theOverhead = this.getOverhead();
            strategy.appendField(locator, this, "overhead", buffer, theOverhead, (this.overhead!= null));
        }
        {
            BigDecimal theInsurance;
            theInsurance = this.getInsurance();
            strategy.appendField(locator, this, "insurance", buffer, theInsurance, (this.insurance!= null));
        }
        {
            BigDecimal theDiscount;
            theDiscount = this.getDiscount();
            strategy.appendField(locator, this, "discount", buffer, theDiscount, (this.discount!= null));
        }
        return buffer;
    }

}
