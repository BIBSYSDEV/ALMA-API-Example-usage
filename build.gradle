plugins {
    id 'java'
    id 'checkstyle'
//    id 'pmd'
    id 'jacoco'
    id "net.linguica.maven-settings" version "0.5"
}

group 'no.unit.nva'
version '1.0-SNAPSHOT'

sourceCompatibility = JavaVersion.VERSION_11  // source-code version and must be <= targetCompatibility
targetCompatibility = JavaVersion.VERSION_11 // bytecode target version

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url = 'http://artifactory.unit.no/artifactory/libs-releases'
    }
}

dependencies {
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
    implementation group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.1.1'
    implementation group: 'org.glassfish.jersey.core', name: 'jersey-client', version: '2.30.1'
    implementation group: 'org.glassfish.jersey.media', name: 'jersey-media-moxy', version: '2.30.1'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'
    implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'
    implementation group: 'org.jvnet.jaxb2_commons', name: 'jaxb2-basics-runtime', version: '1.11.1'
    implementation group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: '2.30.1'
    implementation group: 'com.typesafe', name: 'config', version: '1.4.0'
    implementation group:  'no.bibsys', name: 'vault-client', version: '1.0.8'

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.6.0'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.3.0'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.6.0'
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '3.3.3'
}

test {
    useJUnitPlatform()
    failFast = true
    finalizedBy jacocoTestReport
}

//pmd {
//    ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
//    ruleSets = []
//    ignoreFailures = true
//}

checkstyle {
    configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()
    showViolations = true
}

tasks.withType(Checkstyle) {
    exclude '*'
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
    }
}

jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: 'no/bibsys/alma/rest/**')
        }))
    }
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/reports/jacoco")
    }
}

jacoco {
    toolVersion = "0.8.5"
}

check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn(jacocoTestReport)

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: 'no/bibsys/alma/rest/**')
        }))
    }
    violationRules {
        rule {
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }
        }

        rule {
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }
        }
    }
}

